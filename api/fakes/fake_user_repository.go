// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/cnupp/appssdk/api"
)

type FakeUserRepository struct {
	CreateStub        func(params api.UserParams) (apiErr error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		params api.UserParams
	}
	createReturns struct {
		result1 error
	}
	createReturnsOnCall map[int]struct {
		result1 error
	}
	GetUserStub        func(id string) (api.User, error)
	getUserMutex       sync.RWMutex
	getUserArgsForCall []struct {
		id string
	}
	getUserReturns struct {
		result1 api.User
		result2 error
	}
	getUserReturnsOnCall map[int]struct {
		result1 api.User
		result2 error
	}
	GetUserByEmailStub        func(email string) (api.Users, error)
	getUserByEmailMutex       sync.RWMutex
	getUserByEmailArgsForCall []struct {
		email string
	}
	getUserByEmailReturns struct {
		result1 api.Users
		result2 error
	}
	getUserByEmailReturnsOnCall map[int]struct {
		result1 api.Users
		result2 error
	}
	GetUserByFingerprintStub        func(fingerprint string) (api.Users, error)
	getUserByFingerprintMutex       sync.RWMutex
	getUserByFingerprintArgsForCall []struct {
		fingerprint string
	}
	getUserByFingerprintReturns struct {
		result1 api.Users
		result2 error
	}
	getUserByFingerprintReturnsOnCall map[int]struct {
		result1 api.Users
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUserRepository) Create(params api.UserParams) (apiErr error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		params api.UserParams
	}{params})
	fake.recordInvocation("Create", []interface{}{params})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(params)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createReturns.result1
}

func (fake *FakeUserRepository) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeUserRepository) CreateArgsForCall(i int) api.UserParams {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].params
}

func (fake *FakeUserRepository) CreateReturns(result1 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserRepository) CreateReturnsOnCall(i int, result1 error) {
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserRepository) GetUser(id string) (api.User, error) {
	fake.getUserMutex.Lock()
	ret, specificReturn := fake.getUserReturnsOnCall[len(fake.getUserArgsForCall)]
	fake.getUserArgsForCall = append(fake.getUserArgsForCall, struct {
		id string
	}{id})
	fake.recordInvocation("GetUser", []interface{}{id})
	fake.getUserMutex.Unlock()
	if fake.GetUserStub != nil {
		return fake.GetUserStub(id)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getUserReturns.result1, fake.getUserReturns.result2
}

func (fake *FakeUserRepository) GetUserCallCount() int {
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	return len(fake.getUserArgsForCall)
}

func (fake *FakeUserRepository) GetUserArgsForCall(i int) string {
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	return fake.getUserArgsForCall[i].id
}

func (fake *FakeUserRepository) GetUserReturns(result1 api.User, result2 error) {
	fake.GetUserStub = nil
	fake.getUserReturns = struct {
		result1 api.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) GetUserReturnsOnCall(i int, result1 api.User, result2 error) {
	fake.GetUserStub = nil
	if fake.getUserReturnsOnCall == nil {
		fake.getUserReturnsOnCall = make(map[int]struct {
			result1 api.User
			result2 error
		})
	}
	fake.getUserReturnsOnCall[i] = struct {
		result1 api.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) GetUserByEmail(email string) (api.Users, error) {
	fake.getUserByEmailMutex.Lock()
	ret, specificReturn := fake.getUserByEmailReturnsOnCall[len(fake.getUserByEmailArgsForCall)]
	fake.getUserByEmailArgsForCall = append(fake.getUserByEmailArgsForCall, struct {
		email string
	}{email})
	fake.recordInvocation("GetUserByEmail", []interface{}{email})
	fake.getUserByEmailMutex.Unlock()
	if fake.GetUserByEmailStub != nil {
		return fake.GetUserByEmailStub(email)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getUserByEmailReturns.result1, fake.getUserByEmailReturns.result2
}

func (fake *FakeUserRepository) GetUserByEmailCallCount() int {
	fake.getUserByEmailMutex.RLock()
	defer fake.getUserByEmailMutex.RUnlock()
	return len(fake.getUserByEmailArgsForCall)
}

func (fake *FakeUserRepository) GetUserByEmailArgsForCall(i int) string {
	fake.getUserByEmailMutex.RLock()
	defer fake.getUserByEmailMutex.RUnlock()
	return fake.getUserByEmailArgsForCall[i].email
}

func (fake *FakeUserRepository) GetUserByEmailReturns(result1 api.Users, result2 error) {
	fake.GetUserByEmailStub = nil
	fake.getUserByEmailReturns = struct {
		result1 api.Users
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) GetUserByEmailReturnsOnCall(i int, result1 api.Users, result2 error) {
	fake.GetUserByEmailStub = nil
	if fake.getUserByEmailReturnsOnCall == nil {
		fake.getUserByEmailReturnsOnCall = make(map[int]struct {
			result1 api.Users
			result2 error
		})
	}
	fake.getUserByEmailReturnsOnCall[i] = struct {
		result1 api.Users
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) GetUserByFingerprint(fingerprint string) (api.Users, error) {
	fake.getUserByFingerprintMutex.Lock()
	ret, specificReturn := fake.getUserByFingerprintReturnsOnCall[len(fake.getUserByFingerprintArgsForCall)]
	fake.getUserByFingerprintArgsForCall = append(fake.getUserByFingerprintArgsForCall, struct {
		fingerprint string
	}{fingerprint})
	fake.recordInvocation("GetUserByFingerprint", []interface{}{fingerprint})
	fake.getUserByFingerprintMutex.Unlock()
	if fake.GetUserByFingerprintStub != nil {
		return fake.GetUserByFingerprintStub(fingerprint)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getUserByFingerprintReturns.result1, fake.getUserByFingerprintReturns.result2
}

func (fake *FakeUserRepository) GetUserByFingerprintCallCount() int {
	fake.getUserByFingerprintMutex.RLock()
	defer fake.getUserByFingerprintMutex.RUnlock()
	return len(fake.getUserByFingerprintArgsForCall)
}

func (fake *FakeUserRepository) GetUserByFingerprintArgsForCall(i int) string {
	fake.getUserByFingerprintMutex.RLock()
	defer fake.getUserByFingerprintMutex.RUnlock()
	return fake.getUserByFingerprintArgsForCall[i].fingerprint
}

func (fake *FakeUserRepository) GetUserByFingerprintReturns(result1 api.Users, result2 error) {
	fake.GetUserByFingerprintStub = nil
	fake.getUserByFingerprintReturns = struct {
		result1 api.Users
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) GetUserByFingerprintReturnsOnCall(i int, result1 api.Users, result2 error) {
	fake.GetUserByFingerprintStub = nil
	if fake.getUserByFingerprintReturnsOnCall == nil {
		fake.getUserByFingerprintReturnsOnCall = make(map[int]struct {
			result1 api.Users
			result2 error
		})
	}
	fake.getUserByFingerprintReturnsOnCall[i] = struct {
		result1 api.Users
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	fake.getUserByEmailMutex.RLock()
	defer fake.getUserByEmailMutex.RUnlock()
	fake.getUserByFingerprintMutex.RLock()
	defer fake.getUserByFingerprintMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUserRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.UserRepository = new(FakeUserRepository)
