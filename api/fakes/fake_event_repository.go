// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/sjkyspa/stacks/controller/api/api"
)

type FakeEventRepository struct {
	GetEventsStub        func(eventType string) (api.Events, error)
	getEventsMutex       sync.RWMutex
	getEventsArgsForCall []struct {
		eventType string
	}
	getEventsReturns struct {
		result1 api.Events
		result2 error
	}
	GetEventsByURIStub        func(uri string) (api.Events, error)
	getEventsByURIMutex       sync.RWMutex
	getEventsByURIArgsForCall []struct {
		uri string
	}
	getEventsByURIReturns struct {
		result1 api.Events
		result2 error
	}
}

func (fake *FakeEventRepository) GetEvents(eventType string) (api.Events, error) {
	fake.getEventsMutex.Lock()
	fake.getEventsArgsForCall = append(fake.getEventsArgsForCall, struct {
		eventType string
	}{eventType})
	fake.getEventsMutex.Unlock()
	if fake.GetEventsStub != nil {
		return fake.GetEventsStub(eventType)
	} else {
		return fake.getEventsReturns.result1, fake.getEventsReturns.result2
	}
}

func (fake *FakeEventRepository) GetEventsCallCount() int {
	fake.getEventsMutex.RLock()
	defer fake.getEventsMutex.RUnlock()
	return len(fake.getEventsArgsForCall)
}

func (fake *FakeEventRepository) GetEventsArgsForCall(i int) string {
	fake.getEventsMutex.RLock()
	defer fake.getEventsMutex.RUnlock()
	return fake.getEventsArgsForCall[i].eventType
}

func (fake *FakeEventRepository) GetEventsReturns(result1 api.Events, result2 error) {
	fake.GetEventsStub = nil
	fake.getEventsReturns = struct {
		result1 api.Events
		result2 error
	}{result1, result2}
}

func (fake *FakeEventRepository) GetEventsByURI(uri string) (api.Events, error) {
	fake.getEventsByURIMutex.Lock()
	fake.getEventsByURIArgsForCall = append(fake.getEventsByURIArgsForCall, struct {
		uri string
	}{uri})
	fake.getEventsByURIMutex.Unlock()
	if fake.GetEventsByURIStub != nil {
		return fake.GetEventsByURIStub(uri)
	} else {
		return fake.getEventsByURIReturns.result1, fake.getEventsByURIReturns.result2
	}
}

func (fake *FakeEventRepository) GetEventsByURICallCount() int {
	fake.getEventsByURIMutex.RLock()
	defer fake.getEventsByURIMutex.RUnlock()
	return len(fake.getEventsByURIArgsForCall)
}

func (fake *FakeEventRepository) GetEventsByURIArgsForCall(i int) string {
	fake.getEventsByURIMutex.RLock()
	defer fake.getEventsByURIMutex.RUnlock()
	return fake.getEventsByURIArgsForCall[i].uri
}

func (fake *FakeEventRepository) GetEventsByURIReturns(result1 api.Events, result2 error) {
	fake.GetEventsByURIStub = nil
	fake.getEventsByURIReturns = struct {
		result1 api.Events
		result2 error
	}{result1, result2}
}

var _ api.EventRepository = new(FakeEventRepository)
