// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/cnupp/appssdk/api"
)

type FakeEventRepository struct {
	GetEventsStub        func(eventType string) (api.Events, error)
	getEventsMutex       sync.RWMutex
	getEventsArgsForCall []struct {
		eventType string
	}
	getEventsReturns struct {
		result1 api.Events
		result2 error
	}
	getEventsReturnsOnCall map[int]struct {
		result1 api.Events
		result2 error
	}
	GetEventsByURIStub        func(uri string) (api.Events, error)
	getEventsByURIMutex       sync.RWMutex
	getEventsByURIArgsForCall []struct {
		uri string
	}
	getEventsByURIReturns struct {
		result1 api.Events
		result2 error
	}
	getEventsByURIReturnsOnCall map[int]struct {
		result1 api.Events
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEventRepository) GetEvents(eventType string) (api.Events, error) {
	fake.getEventsMutex.Lock()
	ret, specificReturn := fake.getEventsReturnsOnCall[len(fake.getEventsArgsForCall)]
	fake.getEventsArgsForCall = append(fake.getEventsArgsForCall, struct {
		eventType string
	}{eventType})
	fake.recordInvocation("GetEvents", []interface{}{eventType})
	fake.getEventsMutex.Unlock()
	if fake.GetEventsStub != nil {
		return fake.GetEventsStub(eventType)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getEventsReturns.result1, fake.getEventsReturns.result2
}

func (fake *FakeEventRepository) GetEventsCallCount() int {
	fake.getEventsMutex.RLock()
	defer fake.getEventsMutex.RUnlock()
	return len(fake.getEventsArgsForCall)
}

func (fake *FakeEventRepository) GetEventsArgsForCall(i int) string {
	fake.getEventsMutex.RLock()
	defer fake.getEventsMutex.RUnlock()
	return fake.getEventsArgsForCall[i].eventType
}

func (fake *FakeEventRepository) GetEventsReturns(result1 api.Events, result2 error) {
	fake.GetEventsStub = nil
	fake.getEventsReturns = struct {
		result1 api.Events
		result2 error
	}{result1, result2}
}

func (fake *FakeEventRepository) GetEventsReturnsOnCall(i int, result1 api.Events, result2 error) {
	fake.GetEventsStub = nil
	if fake.getEventsReturnsOnCall == nil {
		fake.getEventsReturnsOnCall = make(map[int]struct {
			result1 api.Events
			result2 error
		})
	}
	fake.getEventsReturnsOnCall[i] = struct {
		result1 api.Events
		result2 error
	}{result1, result2}
}

func (fake *FakeEventRepository) GetEventsByURI(uri string) (api.Events, error) {
	fake.getEventsByURIMutex.Lock()
	ret, specificReturn := fake.getEventsByURIReturnsOnCall[len(fake.getEventsByURIArgsForCall)]
	fake.getEventsByURIArgsForCall = append(fake.getEventsByURIArgsForCall, struct {
		uri string
	}{uri})
	fake.recordInvocation("GetEventsByURI", []interface{}{uri})
	fake.getEventsByURIMutex.Unlock()
	if fake.GetEventsByURIStub != nil {
		return fake.GetEventsByURIStub(uri)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getEventsByURIReturns.result1, fake.getEventsByURIReturns.result2
}

func (fake *FakeEventRepository) GetEventsByURICallCount() int {
	fake.getEventsByURIMutex.RLock()
	defer fake.getEventsByURIMutex.RUnlock()
	return len(fake.getEventsByURIArgsForCall)
}

func (fake *FakeEventRepository) GetEventsByURIArgsForCall(i int) string {
	fake.getEventsByURIMutex.RLock()
	defer fake.getEventsByURIMutex.RUnlock()
	return fake.getEventsByURIArgsForCall[i].uri
}

func (fake *FakeEventRepository) GetEventsByURIReturns(result1 api.Events, result2 error) {
	fake.GetEventsByURIStub = nil
	fake.getEventsByURIReturns = struct {
		result1 api.Events
		result2 error
	}{result1, result2}
}

func (fake *FakeEventRepository) GetEventsByURIReturnsOnCall(i int, result1 api.Events, result2 error) {
	fake.GetEventsByURIStub = nil
	if fake.getEventsByURIReturnsOnCall == nil {
		fake.getEventsByURIReturnsOnCall = make(map[int]struct {
			result1 api.Events
			result2 error
		})
	}
	fake.getEventsByURIReturnsOnCall[i] = struct {
		result1 api.Events
		result2 error
	}{result1, result2}
}

func (fake *FakeEventRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getEventsMutex.RLock()
	defer fake.getEventsMutex.RUnlock()
	fake.getEventsByURIMutex.RLock()
	defer fake.getEventsByURIMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEventRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.EventRepository = new(FakeEventRepository)
