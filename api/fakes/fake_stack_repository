// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/sjkyspa/stacks/controller/api/api"
)

type FakeStackRepository struct {
	CreateStub        func(params map[string]interface{}) (createdStack api.Stack, apiErr error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		params map[string]interface{}
	}
	createReturns struct {
		result1 api.Stack
		result2 error
	}
	GetStackStub        func(id string) (api.Stack, error)
	getStackMutex       sync.RWMutex
	getStackArgsForCall []struct {
		id string
	}
	getStackReturns struct {
		result1 api.Stack
		result2 error
	}
	GetStackByURIStub        func(uri string) (api.Stack, error)
	getStackByURIMutex       sync.RWMutex
	getStackByURIArgsForCall []struct {
		uri string
	}
	getStackByURIReturns struct {
		result1 api.Stack
		result2 error
	}
	GetStacksStub        func() (api.Stacks, error)
	getStacksMutex       sync.RWMutex
	getStacksArgsForCall []struct{}
	getStacksReturns     struct {
		result1 api.Stacks
		result2 error
	}
	GetStackByNameStub        func(name string) (api.Stacks, error)
	getStackByNameMutex       sync.RWMutex
	getStackByNameArgsForCall []struct {
		name string
	}
	getStackByNameReturns struct {
		result1 api.Stacks
		result2 error
	}
	UpdateStub        func(id string, params map[string]interface{}) (apiErr error)
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		id     string
		params map[string]interface{}
	}
	updateReturns struct {
		result1 error
	}
	DeleteStub        func(id string) (apiErr error)
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		id string
	}
	deleteReturns struct {
		result1 error
	}
}

func (fake *FakeStackRepository) Create(params map[string]interface{}) (createdStack api.Stack, apiErr error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		params map[string]interface{}
	}{params})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(params)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2
	}
}

func (fake *FakeStackRepository) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeStackRepository) CreateArgsForCall(i int) map[string]interface{} {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].params
}

func (fake *FakeStackRepository) CreateReturns(result1 api.Stack, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 api.Stack
		result2 error
	}{result1, result2}
}

func (fake *FakeStackRepository) GetStack(id string) (api.Stack, error) {
	fake.getStackMutex.Lock()
	fake.getStackArgsForCall = append(fake.getStackArgsForCall, struct {
		id string
	}{id})
	fake.getStackMutex.Unlock()
	if fake.GetStackStub != nil {
		return fake.GetStackStub(id)
	} else {
		return fake.getStackReturns.result1, fake.getStackReturns.result2
	}
}

func (fake *FakeStackRepository) GetStackCallCount() int {
	fake.getStackMutex.RLock()
	defer fake.getStackMutex.RUnlock()
	return len(fake.getStackArgsForCall)
}

func (fake *FakeStackRepository) GetStackArgsForCall(i int) string {
	fake.getStackMutex.RLock()
	defer fake.getStackMutex.RUnlock()
	return fake.getStackArgsForCall[i].id
}

func (fake *FakeStackRepository) GetStackReturns(result1 api.Stack, result2 error) {
	fake.GetStackStub = nil
	fake.getStackReturns = struct {
		result1 api.Stack
		result2 error
	}{result1, result2}
}

func (fake *FakeStackRepository) GetStackByURI(uri string) (api.Stack, error) {
	fake.getStackByURIMutex.Lock()
	fake.getStackByURIArgsForCall = append(fake.getStackByURIArgsForCall, struct {
		uri string
	}{uri})
	fake.getStackByURIMutex.Unlock()
	if fake.GetStackByURIStub != nil {
		return fake.GetStackByURIStub(uri)
	} else {
		return fake.getStackByURIReturns.result1, fake.getStackByURIReturns.result2
	}
}

func (fake *FakeStackRepository) GetStackByURICallCount() int {
	fake.getStackByURIMutex.RLock()
	defer fake.getStackByURIMutex.RUnlock()
	return len(fake.getStackByURIArgsForCall)
}

func (fake *FakeStackRepository) GetStackByURIArgsForCall(i int) string {
	fake.getStackByURIMutex.RLock()
	defer fake.getStackByURIMutex.RUnlock()
	return fake.getStackByURIArgsForCall[i].uri
}

func (fake *FakeStackRepository) GetStackByURIReturns(result1 api.Stack, result2 error) {
	fake.GetStackByURIStub = nil
	fake.getStackByURIReturns = struct {
		result1 api.Stack
		result2 error
	}{result1, result2}
}

func (fake *FakeStackRepository) GetStacks() (api.Stacks, error) {
	fake.getStacksMutex.Lock()
	fake.getStacksArgsForCall = append(fake.getStacksArgsForCall, struct{}{})
	fake.getStacksMutex.Unlock()
	if fake.GetStacksStub != nil {
		return fake.GetStacksStub()
	} else {
		return fake.getStacksReturns.result1, fake.getStacksReturns.result2
	}
}

func (fake *FakeStackRepository) GetStacksCallCount() int {
	fake.getStacksMutex.RLock()
	defer fake.getStacksMutex.RUnlock()
	return len(fake.getStacksArgsForCall)
}

func (fake *FakeStackRepository) GetStacksReturns(result1 api.Stacks, result2 error) {
	fake.GetStacksStub = nil
	fake.getStacksReturns = struct {
		result1 api.Stacks
		result2 error
	}{result1, result2}
}

func (fake *FakeStackRepository) GetStackByName(name string) (api.Stacks, error) {
	fake.getStackByNameMutex.Lock()
	fake.getStackByNameArgsForCall = append(fake.getStackByNameArgsForCall, struct {
		name string
	}{name})
	fake.getStackByNameMutex.Unlock()
	if fake.GetStackByNameStub != nil {
		return fake.GetStackByNameStub(name)
	} else {
		return fake.getStackByNameReturns.result1, fake.getStackByNameReturns.result2
	}
}

func (fake *FakeStackRepository) GetStackByNameCallCount() int {
	fake.getStackByNameMutex.RLock()
	defer fake.getStackByNameMutex.RUnlock()
	return len(fake.getStackByNameArgsForCall)
}

func (fake *FakeStackRepository) GetStackByNameArgsForCall(i int) string {
	fake.getStackByNameMutex.RLock()
	defer fake.getStackByNameMutex.RUnlock()
	return fake.getStackByNameArgsForCall[i].name
}

func (fake *FakeStackRepository) GetStackByNameReturns(result1 api.Stacks, result2 error) {
	fake.GetStackByNameStub = nil
	fake.getStackByNameReturns = struct {
		result1 api.Stacks
		result2 error
	}{result1, result2}
}

func (fake *FakeStackRepository) Update(id string, params map[string]interface{}) (apiErr error) {
	fake.updateMutex.Lock()
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		id     string
		params map[string]interface{}
	}{id, params})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub(id, params)
	} else {
		return fake.updateReturns.result1
	}
}

func (fake *FakeStackRepository) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeStackRepository) UpdateArgsForCall(i int) (string, map[string]interface{}) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return fake.updateArgsForCall[i].id, fake.updateArgsForCall[i].params
}

func (fake *FakeStackRepository) UpdateReturns(result1 error) {
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStackRepository) Delete(id string) (apiErr error) {
	fake.deleteMutex.Lock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		id string
	}{id})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(id)
	} else {
		return fake.deleteReturns.result1
	}
}

func (fake *FakeStackRepository) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeStackRepository) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].id
}

func (fake *FakeStackRepository) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

var _ api.StackRepository = new(FakeStackRepository)
