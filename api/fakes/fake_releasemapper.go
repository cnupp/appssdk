// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/sjkyspa/stacks/controller/api/api"
)

type FakeReleaseMapper struct {
	CreateStub        func(app api.App) (release api.Release, apiErr error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		app api.App
	}
	createReturns struct {
		result1 api.Release
		result2 error
	}
	GetReleasesStub        func(app api.App) (releases api.Releases, apiErr error)
	getReleasesMutex       sync.RWMutex
	getReleasesArgsForCall []struct {
		app api.App
	}
	getReleasesReturns struct {
		result1 api.Releases
		result2 error
	}
	GetReleaseStub        func(app api.App, id string) (release api.Release, apiErr error)
	getReleaseMutex       sync.RWMutex
	getReleaseArgsForCall []struct {
		app api.App
		id  string
	}
	getReleaseReturns struct {
		result1 api.Release
		result2 error
	}
	SuccessStub        func(release api.Release) (apiErr error)
	successMutex       sync.RWMutex
	successArgsForCall []struct {
		release api.Release
	}
	successReturns struct {
		result1 error
	}
	FailStub        func(release api.Release) (apiErr error)
	failMutex       sync.RWMutex
	failArgsForCall []struct {
		release api.Release
	}
	failReturns struct {
		result1 error
	}
}

func (fake *FakeReleaseMapper) Create(app api.App) (release api.Release, apiErr error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		app api.App
	}{app})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(app)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2
	}
}

func (fake *FakeReleaseMapper) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeReleaseMapper) CreateArgsForCall(i int) api.App {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].app
}

func (fake *FakeReleaseMapper) CreateReturns(result1 api.Release, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 api.Release
		result2 error
	}{result1, result2}
}

func (fake *FakeReleaseMapper) GetReleases(app api.App) (releases api.Releases, apiErr error) {
	fake.getReleasesMutex.Lock()
	fake.getReleasesArgsForCall = append(fake.getReleasesArgsForCall, struct {
		app api.App
	}{app})
	fake.getReleasesMutex.Unlock()
	if fake.GetReleasesStub != nil {
		return fake.GetReleasesStub(app)
	} else {
		return fake.getReleasesReturns.result1, fake.getReleasesReturns.result2
	}
}

func (fake *FakeReleaseMapper) GetReleasesCallCount() int {
	fake.getReleasesMutex.RLock()
	defer fake.getReleasesMutex.RUnlock()
	return len(fake.getReleasesArgsForCall)
}

func (fake *FakeReleaseMapper) GetReleasesArgsForCall(i int) api.App {
	fake.getReleasesMutex.RLock()
	defer fake.getReleasesMutex.RUnlock()
	return fake.getReleasesArgsForCall[i].app
}

func (fake *FakeReleaseMapper) GetReleasesReturns(result1 api.Releases, result2 error) {
	fake.GetReleasesStub = nil
	fake.getReleasesReturns = struct {
		result1 api.Releases
		result2 error
	}{result1, result2}
}

func (fake *FakeReleaseMapper) GetRelease(app api.App, id string) (release api.Release, apiErr error) {
	fake.getReleaseMutex.Lock()
	fake.getReleaseArgsForCall = append(fake.getReleaseArgsForCall, struct {
		app api.App
		id  string
	}{app, id})
	fake.getReleaseMutex.Unlock()
	if fake.GetReleaseStub != nil {
		return fake.GetReleaseStub(app, id)
	} else {
		return fake.getReleaseReturns.result1, fake.getReleaseReturns.result2
	}
}

func (fake *FakeReleaseMapper) GetReleaseCallCount() int {
	fake.getReleaseMutex.RLock()
	defer fake.getReleaseMutex.RUnlock()
	return len(fake.getReleaseArgsForCall)
}

func (fake *FakeReleaseMapper) GetReleaseArgsForCall(i int) (api.App, string) {
	fake.getReleaseMutex.RLock()
	defer fake.getReleaseMutex.RUnlock()
	return fake.getReleaseArgsForCall[i].app, fake.getReleaseArgsForCall[i].id
}

func (fake *FakeReleaseMapper) GetReleaseReturns(result1 api.Release, result2 error) {
	fake.GetReleaseStub = nil
	fake.getReleaseReturns = struct {
		result1 api.Release
		result2 error
	}{result1, result2}
}

func (fake *FakeReleaseMapper) Success(release api.Release) (apiErr error) {
	fake.successMutex.Lock()
	fake.successArgsForCall = append(fake.successArgsForCall, struct {
		release api.Release
	}{release})
	fake.successMutex.Unlock()
	if fake.SuccessStub != nil {
		return fake.SuccessStub(release)
	} else {
		return fake.successReturns.result1
	}
}

func (fake *FakeReleaseMapper) SuccessCallCount() int {
	fake.successMutex.RLock()
	defer fake.successMutex.RUnlock()
	return len(fake.successArgsForCall)
}

func (fake *FakeReleaseMapper) SuccessArgsForCall(i int) api.Release {
	fake.successMutex.RLock()
	defer fake.successMutex.RUnlock()
	return fake.successArgsForCall[i].release
}

func (fake *FakeReleaseMapper) SuccessReturns(result1 error) {
	fake.SuccessStub = nil
	fake.successReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReleaseMapper) Fail(release api.Release) (apiErr error) {
	fake.failMutex.Lock()
	fake.failArgsForCall = append(fake.failArgsForCall, struct {
		release api.Release
	}{release})
	fake.failMutex.Unlock()
	if fake.FailStub != nil {
		return fake.FailStub(release)
	} else {
		return fake.failReturns.result1
	}
}

func (fake *FakeReleaseMapper) FailCallCount() int {
	fake.failMutex.RLock()
	defer fake.failMutex.RUnlock()
	return len(fake.failArgsForCall)
}

func (fake *FakeReleaseMapper) FailArgsForCall(i int) api.Release {
	fake.failMutex.RLock()
	defer fake.failMutex.RUnlock()
	return fake.failArgsForCall[i].release
}

func (fake *FakeReleaseMapper) FailReturns(result1 error) {
	fake.FailStub = nil
	fake.failReturns = struct {
		result1 error
	}{result1}
}

var _ api.ReleaseMapper = new(FakeReleaseMapper)
