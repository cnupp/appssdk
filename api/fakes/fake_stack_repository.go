// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/cnupp/appssdk/api"
)

type FakeStackRepository struct {
	CreateStub        func(params map[string]interface{}) (createdStack api.Stack, apiErr error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		params map[string]interface{}
	}
	createReturns struct {
		result1 api.Stack
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 api.Stack
		result2 error
	}
	GetStackStub        func(id string) (api.Stack, error)
	getStackMutex       sync.RWMutex
	getStackArgsForCall []struct {
		id string
	}
	getStackReturns struct {
		result1 api.Stack
		result2 error
	}
	getStackReturnsOnCall map[int]struct {
		result1 api.Stack
		result2 error
	}
	GetStackByURIStub        func(uri string) (api.Stack, error)
	getStackByURIMutex       sync.RWMutex
	getStackByURIArgsForCall []struct {
		uri string
	}
	getStackByURIReturns struct {
		result1 api.Stack
		result2 error
	}
	getStackByURIReturnsOnCall map[int]struct {
		result1 api.Stack
		result2 error
	}
	GetStacksStub        func() (api.Stacks, error)
	getStacksMutex       sync.RWMutex
	getStacksArgsForCall []struct{}
	getStacksReturns     struct {
		result1 api.Stacks
		result2 error
	}
	getStacksReturnsOnCall map[int]struct {
		result1 api.Stacks
		result2 error
	}
	GetStackByNameStub        func(name string) (api.Stacks, error)
	getStackByNameMutex       sync.RWMutex
	getStackByNameArgsForCall []struct {
		name string
	}
	getStackByNameReturns struct {
		result1 api.Stacks
		result2 error
	}
	getStackByNameReturnsOnCall map[int]struct {
		result1 api.Stacks
		result2 error
	}
	UpdateStub        func(id string, params map[string]interface{}) (apiErr error)
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		id     string
		params map[string]interface{}
	}
	updateReturns struct {
		result1 error
	}
	updateReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteStub        func(id string) (apiErr error)
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		id string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	PublishStub        func(id string) (apiErr error)
	publishMutex       sync.RWMutex
	publishArgsForCall []struct {
		id string
	}
	publishReturns struct {
		result1 error
	}
	publishReturnsOnCall map[int]struct {
		result1 error
	}
	UnPublishStub        func(id string) (apiErr error)
	unPublishMutex       sync.RWMutex
	unPublishArgsForCall []struct {
		id string
	}
	unPublishReturns struct {
		result1 error
	}
	unPublishReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStackRepository) Create(params map[string]interface{}) (createdStack api.Stack, apiErr error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		params map[string]interface{}
	}{params})
	fake.recordInvocation("Create", []interface{}{params})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(params)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createReturns.result1, fake.createReturns.result2
}

func (fake *FakeStackRepository) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeStackRepository) CreateArgsForCall(i int) map[string]interface{} {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].params
}

func (fake *FakeStackRepository) CreateReturns(result1 api.Stack, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 api.Stack
		result2 error
	}{result1, result2}
}

func (fake *FakeStackRepository) CreateReturnsOnCall(i int, result1 api.Stack, result2 error) {
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 api.Stack
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 api.Stack
		result2 error
	}{result1, result2}
}

func (fake *FakeStackRepository) GetStack(id string) (api.Stack, error) {
	fake.getStackMutex.Lock()
	ret, specificReturn := fake.getStackReturnsOnCall[len(fake.getStackArgsForCall)]
	fake.getStackArgsForCall = append(fake.getStackArgsForCall, struct {
		id string
	}{id})
	fake.recordInvocation("GetStack", []interface{}{id})
	fake.getStackMutex.Unlock()
	if fake.GetStackStub != nil {
		return fake.GetStackStub(id)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getStackReturns.result1, fake.getStackReturns.result2
}

func (fake *FakeStackRepository) GetStackCallCount() int {
	fake.getStackMutex.RLock()
	defer fake.getStackMutex.RUnlock()
	return len(fake.getStackArgsForCall)
}

func (fake *FakeStackRepository) GetStackArgsForCall(i int) string {
	fake.getStackMutex.RLock()
	defer fake.getStackMutex.RUnlock()
	return fake.getStackArgsForCall[i].id
}

func (fake *FakeStackRepository) GetStackReturns(result1 api.Stack, result2 error) {
	fake.GetStackStub = nil
	fake.getStackReturns = struct {
		result1 api.Stack
		result2 error
	}{result1, result2}
}

func (fake *FakeStackRepository) GetStackReturnsOnCall(i int, result1 api.Stack, result2 error) {
	fake.GetStackStub = nil
	if fake.getStackReturnsOnCall == nil {
		fake.getStackReturnsOnCall = make(map[int]struct {
			result1 api.Stack
			result2 error
		})
	}
	fake.getStackReturnsOnCall[i] = struct {
		result1 api.Stack
		result2 error
	}{result1, result2}
}

func (fake *FakeStackRepository) GetStackByURI(uri string) (api.Stack, error) {
	fake.getStackByURIMutex.Lock()
	ret, specificReturn := fake.getStackByURIReturnsOnCall[len(fake.getStackByURIArgsForCall)]
	fake.getStackByURIArgsForCall = append(fake.getStackByURIArgsForCall, struct {
		uri string
	}{uri})
	fake.recordInvocation("GetStackByURI", []interface{}{uri})
	fake.getStackByURIMutex.Unlock()
	if fake.GetStackByURIStub != nil {
		return fake.GetStackByURIStub(uri)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getStackByURIReturns.result1, fake.getStackByURIReturns.result2
}

func (fake *FakeStackRepository) GetStackByURICallCount() int {
	fake.getStackByURIMutex.RLock()
	defer fake.getStackByURIMutex.RUnlock()
	return len(fake.getStackByURIArgsForCall)
}

func (fake *FakeStackRepository) GetStackByURIArgsForCall(i int) string {
	fake.getStackByURIMutex.RLock()
	defer fake.getStackByURIMutex.RUnlock()
	return fake.getStackByURIArgsForCall[i].uri
}

func (fake *FakeStackRepository) GetStackByURIReturns(result1 api.Stack, result2 error) {
	fake.GetStackByURIStub = nil
	fake.getStackByURIReturns = struct {
		result1 api.Stack
		result2 error
	}{result1, result2}
}

func (fake *FakeStackRepository) GetStackByURIReturnsOnCall(i int, result1 api.Stack, result2 error) {
	fake.GetStackByURIStub = nil
	if fake.getStackByURIReturnsOnCall == nil {
		fake.getStackByURIReturnsOnCall = make(map[int]struct {
			result1 api.Stack
			result2 error
		})
	}
	fake.getStackByURIReturnsOnCall[i] = struct {
		result1 api.Stack
		result2 error
	}{result1, result2}
}

func (fake *FakeStackRepository) GetStacks() (api.Stacks, error) {
	fake.getStacksMutex.Lock()
	ret, specificReturn := fake.getStacksReturnsOnCall[len(fake.getStacksArgsForCall)]
	fake.getStacksArgsForCall = append(fake.getStacksArgsForCall, struct{}{})
	fake.recordInvocation("GetStacks", []interface{}{})
	fake.getStacksMutex.Unlock()
	if fake.GetStacksStub != nil {
		return fake.GetStacksStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getStacksReturns.result1, fake.getStacksReturns.result2
}

func (fake *FakeStackRepository) GetStacksCallCount() int {
	fake.getStacksMutex.RLock()
	defer fake.getStacksMutex.RUnlock()
	return len(fake.getStacksArgsForCall)
}

func (fake *FakeStackRepository) GetStacksReturns(result1 api.Stacks, result2 error) {
	fake.GetStacksStub = nil
	fake.getStacksReturns = struct {
		result1 api.Stacks
		result2 error
	}{result1, result2}
}

func (fake *FakeStackRepository) GetStacksReturnsOnCall(i int, result1 api.Stacks, result2 error) {
	fake.GetStacksStub = nil
	if fake.getStacksReturnsOnCall == nil {
		fake.getStacksReturnsOnCall = make(map[int]struct {
			result1 api.Stacks
			result2 error
		})
	}
	fake.getStacksReturnsOnCall[i] = struct {
		result1 api.Stacks
		result2 error
	}{result1, result2}
}

func (fake *FakeStackRepository) GetStackByName(name string) (api.Stacks, error) {
	fake.getStackByNameMutex.Lock()
	ret, specificReturn := fake.getStackByNameReturnsOnCall[len(fake.getStackByNameArgsForCall)]
	fake.getStackByNameArgsForCall = append(fake.getStackByNameArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("GetStackByName", []interface{}{name})
	fake.getStackByNameMutex.Unlock()
	if fake.GetStackByNameStub != nil {
		return fake.GetStackByNameStub(name)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getStackByNameReturns.result1, fake.getStackByNameReturns.result2
}

func (fake *FakeStackRepository) GetStackByNameCallCount() int {
	fake.getStackByNameMutex.RLock()
	defer fake.getStackByNameMutex.RUnlock()
	return len(fake.getStackByNameArgsForCall)
}

func (fake *FakeStackRepository) GetStackByNameArgsForCall(i int) string {
	fake.getStackByNameMutex.RLock()
	defer fake.getStackByNameMutex.RUnlock()
	return fake.getStackByNameArgsForCall[i].name
}

func (fake *FakeStackRepository) GetStackByNameReturns(result1 api.Stacks, result2 error) {
	fake.GetStackByNameStub = nil
	fake.getStackByNameReturns = struct {
		result1 api.Stacks
		result2 error
	}{result1, result2}
}

func (fake *FakeStackRepository) GetStackByNameReturnsOnCall(i int, result1 api.Stacks, result2 error) {
	fake.GetStackByNameStub = nil
	if fake.getStackByNameReturnsOnCall == nil {
		fake.getStackByNameReturnsOnCall = make(map[int]struct {
			result1 api.Stacks
			result2 error
		})
	}
	fake.getStackByNameReturnsOnCall[i] = struct {
		result1 api.Stacks
		result2 error
	}{result1, result2}
}

func (fake *FakeStackRepository) Update(id string, params map[string]interface{}) (apiErr error) {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		id     string
		params map[string]interface{}
	}{id, params})
	fake.recordInvocation("Update", []interface{}{id, params})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub(id, params)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.updateReturns.result1
}

func (fake *FakeStackRepository) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeStackRepository) UpdateArgsForCall(i int) (string, map[string]interface{}) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return fake.updateArgsForCall[i].id, fake.updateArgsForCall[i].params
}

func (fake *FakeStackRepository) UpdateReturns(result1 error) {
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStackRepository) UpdateReturnsOnCall(i int, result1 error) {
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStackRepository) Delete(id string) (apiErr error) {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		id string
	}{id})
	fake.recordInvocation("Delete", []interface{}{id})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(id)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteReturns.result1
}

func (fake *FakeStackRepository) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeStackRepository) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].id
}

func (fake *FakeStackRepository) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStackRepository) DeleteReturnsOnCall(i int, result1 error) {
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStackRepository) Publish(id string) (apiErr error) {
	fake.publishMutex.Lock()
	ret, specificReturn := fake.publishReturnsOnCall[len(fake.publishArgsForCall)]
	fake.publishArgsForCall = append(fake.publishArgsForCall, struct {
		id string
	}{id})
	fake.recordInvocation("Publish", []interface{}{id})
	fake.publishMutex.Unlock()
	if fake.PublishStub != nil {
		return fake.PublishStub(id)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.publishReturns.result1
}

func (fake *FakeStackRepository) PublishCallCount() int {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return len(fake.publishArgsForCall)
}

func (fake *FakeStackRepository) PublishArgsForCall(i int) string {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return fake.publishArgsForCall[i].id
}

func (fake *FakeStackRepository) PublishReturns(result1 error) {
	fake.PublishStub = nil
	fake.publishReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStackRepository) PublishReturnsOnCall(i int, result1 error) {
	fake.PublishStub = nil
	if fake.publishReturnsOnCall == nil {
		fake.publishReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.publishReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStackRepository) UnPublish(id string) (apiErr error) {
	fake.unPublishMutex.Lock()
	ret, specificReturn := fake.unPublishReturnsOnCall[len(fake.unPublishArgsForCall)]
	fake.unPublishArgsForCall = append(fake.unPublishArgsForCall, struct {
		id string
	}{id})
	fake.recordInvocation("UnPublish", []interface{}{id})
	fake.unPublishMutex.Unlock()
	if fake.UnPublishStub != nil {
		return fake.UnPublishStub(id)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.unPublishReturns.result1
}

func (fake *FakeStackRepository) UnPublishCallCount() int {
	fake.unPublishMutex.RLock()
	defer fake.unPublishMutex.RUnlock()
	return len(fake.unPublishArgsForCall)
}

func (fake *FakeStackRepository) UnPublishArgsForCall(i int) string {
	fake.unPublishMutex.RLock()
	defer fake.unPublishMutex.RUnlock()
	return fake.unPublishArgsForCall[i].id
}

func (fake *FakeStackRepository) UnPublishReturns(result1 error) {
	fake.UnPublishStub = nil
	fake.unPublishReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStackRepository) UnPublishReturnsOnCall(i int, result1 error) {
	fake.UnPublishStub = nil
	if fake.unPublishReturnsOnCall == nil {
		fake.unPublishReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unPublishReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStackRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.getStackMutex.RLock()
	defer fake.getStackMutex.RUnlock()
	fake.getStackByURIMutex.RLock()
	defer fake.getStackByURIMutex.RUnlock()
	fake.getStacksMutex.RLock()
	defer fake.getStacksMutex.RUnlock()
	fake.getStackByNameMutex.RLock()
	defer fake.getStackByNameMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	fake.unPublishMutex.RLock()
	defer fake.unPublishMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStackRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.StackRepository = new(FakeStackRepository)
