// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/sjkyspa/stacks/controller/api/api"
)

type FakeDomainRepository struct {
	CreateStub        func(params api.DomainParams) (createdDomain api.Domain, apiErr error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		params api.DomainParams
	}
	createReturns struct {
		result1 api.Domain
		result2 error
	}
	GetDomainStub        func(id string) (api.Domain, error)
	getDomainMutex       sync.RWMutex
	getDomainArgsForCall []struct {
		id string
	}
	getDomainReturns struct {
		result1 api.Domain
		result2 error
	}
	GetDomainsStub        func() (api.Domains, error)
	getDomainsMutex       sync.RWMutex
	getDomainsArgsForCall []struct{}
	getDomainsReturns     struct {
		result1 api.Domains
		result2 error
	}
	GetDomainByNameStub        func(name string) (api.Domains, error)
	getDomainByNameMutex       sync.RWMutex
	getDomainByNameArgsForCall []struct {
		name string
	}
	getDomainByNameReturns struct {
		result1 api.Domains
		result2 error
	}
	DeleteStub        func(id string) (apiErr error)
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		id string
	}
	deleteReturns struct {
		result1 error
	}
}

func (fake *FakeDomainRepository) Create(params api.DomainParams) (createdDomain api.Domain, apiErr error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		params api.DomainParams
	}{params})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(params)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2
	}
}

func (fake *FakeDomainRepository) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeDomainRepository) CreateArgsForCall(i int) api.DomainParams {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].params
}

func (fake *FakeDomainRepository) CreateReturns(result1 api.Domain, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 api.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeDomainRepository) GetDomain(id string) (api.Domain, error) {
	fake.getDomainMutex.Lock()
	fake.getDomainArgsForCall = append(fake.getDomainArgsForCall, struct {
		id string
	}{id})
	fake.getDomainMutex.Unlock()
	if fake.GetDomainStub != nil {
		return fake.GetDomainStub(id)
	} else {
		return fake.getDomainReturns.result1, fake.getDomainReturns.result2
	}
}

func (fake *FakeDomainRepository) GetDomainCallCount() int {
	fake.getDomainMutex.RLock()
	defer fake.getDomainMutex.RUnlock()
	return len(fake.getDomainArgsForCall)
}

func (fake *FakeDomainRepository) GetDomainArgsForCall(i int) string {
	fake.getDomainMutex.RLock()
	defer fake.getDomainMutex.RUnlock()
	return fake.getDomainArgsForCall[i].id
}

func (fake *FakeDomainRepository) GetDomainReturns(result1 api.Domain, result2 error) {
	fake.GetDomainStub = nil
	fake.getDomainReturns = struct {
		result1 api.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeDomainRepository) GetDomains() (api.Domains, error) {
	fake.getDomainsMutex.Lock()
	fake.getDomainsArgsForCall = append(fake.getDomainsArgsForCall, struct{}{})
	fake.getDomainsMutex.Unlock()
	if fake.GetDomainsStub != nil {
		return fake.GetDomainsStub()
	} else {
		return fake.getDomainsReturns.result1, fake.getDomainsReturns.result2
	}
}

func (fake *FakeDomainRepository) GetDomainsCallCount() int {
	fake.getDomainsMutex.RLock()
	defer fake.getDomainsMutex.RUnlock()
	return len(fake.getDomainsArgsForCall)
}

func (fake *FakeDomainRepository) GetDomainsReturns(result1 api.Domains, result2 error) {
	fake.GetDomainsStub = nil
	fake.getDomainsReturns = struct {
		result1 api.Domains
		result2 error
	}{result1, result2}
}

func (fake *FakeDomainRepository) GetDomainByName(name string) (api.Domains, error) {
	fake.getDomainByNameMutex.Lock()
	fake.getDomainByNameArgsForCall = append(fake.getDomainByNameArgsForCall, struct {
		name string
	}{name})
	fake.getDomainByNameMutex.Unlock()
	if fake.GetDomainByNameStub != nil {
		return fake.GetDomainByNameStub(name)
	} else {
		return fake.getDomainByNameReturns.result1, fake.getDomainByNameReturns.result2
	}
}

func (fake *FakeDomainRepository) GetDomainByNameCallCount() int {
	fake.getDomainByNameMutex.RLock()
	defer fake.getDomainByNameMutex.RUnlock()
	return len(fake.getDomainByNameArgsForCall)
}

func (fake *FakeDomainRepository) GetDomainByNameArgsForCall(i int) string {
	fake.getDomainByNameMutex.RLock()
	defer fake.getDomainByNameMutex.RUnlock()
	return fake.getDomainByNameArgsForCall[i].name
}

func (fake *FakeDomainRepository) GetDomainByNameReturns(result1 api.Domains, result2 error) {
	fake.GetDomainByNameStub = nil
	fake.getDomainByNameReturns = struct {
		result1 api.Domains
		result2 error
	}{result1, result2}
}

func (fake *FakeDomainRepository) Delete(id string) (apiErr error) {
	fake.deleteMutex.Lock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		id string
	}{id})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(id)
	} else {
		return fake.deleteReturns.result1
	}
}

func (fake *FakeDomainRepository) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeDomainRepository) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].id
}

func (fake *FakeDomainRepository) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

var _ api.DomainRepository = new(FakeDomainRepository)
