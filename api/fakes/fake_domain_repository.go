// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/cnupp/appssdk/api"
)

type FakeDomainRepository struct {
	CreateStub        func(params api.DomainParams) (createdDomain api.Domain, apiErr error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		params api.DomainParams
	}
	createReturns struct {
		result1 api.Domain
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 api.Domain
		result2 error
	}
	GetDomainStub        func(name string) (api.Domain, error)
	getDomainMutex       sync.RWMutex
	getDomainArgsForCall []struct {
		name string
	}
	getDomainReturns struct {
		result1 api.Domain
		result2 error
	}
	getDomainReturnsOnCall map[int]struct {
		result1 api.Domain
		result2 error
	}
	GetDomainsStub        func() (api.Domains, error)
	getDomainsMutex       sync.RWMutex
	getDomainsArgsForCall []struct{}
	getDomainsReturns     struct {
		result1 api.Domains
		result2 error
	}
	getDomainsReturnsOnCall map[int]struct {
		result1 api.Domains
		result2 error
	}
	AttachCertStub        func(api.Domain, api.CertParams) error
	attachCertMutex       sync.RWMutex
	attachCertArgsForCall []struct {
		arg1 api.Domain
		arg2 api.CertParams
	}
	attachCertReturns struct {
		result1 error
	}
	attachCertReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteStub        func(id string) (apiErr error)
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		id string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDomainRepository) Create(params api.DomainParams) (createdDomain api.Domain, apiErr error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		params api.DomainParams
	}{params})
	fake.recordInvocation("Create", []interface{}{params})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(params)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createReturns.result1, fake.createReturns.result2
}

func (fake *FakeDomainRepository) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeDomainRepository) CreateArgsForCall(i int) api.DomainParams {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].params
}

func (fake *FakeDomainRepository) CreateReturns(result1 api.Domain, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 api.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeDomainRepository) CreateReturnsOnCall(i int, result1 api.Domain, result2 error) {
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 api.Domain
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 api.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeDomainRepository) GetDomain(name string) (api.Domain, error) {
	fake.getDomainMutex.Lock()
	ret, specificReturn := fake.getDomainReturnsOnCall[len(fake.getDomainArgsForCall)]
	fake.getDomainArgsForCall = append(fake.getDomainArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("GetDomain", []interface{}{name})
	fake.getDomainMutex.Unlock()
	if fake.GetDomainStub != nil {
		return fake.GetDomainStub(name)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getDomainReturns.result1, fake.getDomainReturns.result2
}

func (fake *FakeDomainRepository) GetDomainCallCount() int {
	fake.getDomainMutex.RLock()
	defer fake.getDomainMutex.RUnlock()
	return len(fake.getDomainArgsForCall)
}

func (fake *FakeDomainRepository) GetDomainArgsForCall(i int) string {
	fake.getDomainMutex.RLock()
	defer fake.getDomainMutex.RUnlock()
	return fake.getDomainArgsForCall[i].name
}

func (fake *FakeDomainRepository) GetDomainReturns(result1 api.Domain, result2 error) {
	fake.GetDomainStub = nil
	fake.getDomainReturns = struct {
		result1 api.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeDomainRepository) GetDomainReturnsOnCall(i int, result1 api.Domain, result2 error) {
	fake.GetDomainStub = nil
	if fake.getDomainReturnsOnCall == nil {
		fake.getDomainReturnsOnCall = make(map[int]struct {
			result1 api.Domain
			result2 error
		})
	}
	fake.getDomainReturnsOnCall[i] = struct {
		result1 api.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeDomainRepository) GetDomains() (api.Domains, error) {
	fake.getDomainsMutex.Lock()
	ret, specificReturn := fake.getDomainsReturnsOnCall[len(fake.getDomainsArgsForCall)]
	fake.getDomainsArgsForCall = append(fake.getDomainsArgsForCall, struct{}{})
	fake.recordInvocation("GetDomains", []interface{}{})
	fake.getDomainsMutex.Unlock()
	if fake.GetDomainsStub != nil {
		return fake.GetDomainsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getDomainsReturns.result1, fake.getDomainsReturns.result2
}

func (fake *FakeDomainRepository) GetDomainsCallCount() int {
	fake.getDomainsMutex.RLock()
	defer fake.getDomainsMutex.RUnlock()
	return len(fake.getDomainsArgsForCall)
}

func (fake *FakeDomainRepository) GetDomainsReturns(result1 api.Domains, result2 error) {
	fake.GetDomainsStub = nil
	fake.getDomainsReturns = struct {
		result1 api.Domains
		result2 error
	}{result1, result2}
}

func (fake *FakeDomainRepository) GetDomainsReturnsOnCall(i int, result1 api.Domains, result2 error) {
	fake.GetDomainsStub = nil
	if fake.getDomainsReturnsOnCall == nil {
		fake.getDomainsReturnsOnCall = make(map[int]struct {
			result1 api.Domains
			result2 error
		})
	}
	fake.getDomainsReturnsOnCall[i] = struct {
		result1 api.Domains
		result2 error
	}{result1, result2}
}

func (fake *FakeDomainRepository) AttachCert(arg1 api.Domain, arg2 api.CertParams) error {
	fake.attachCertMutex.Lock()
	ret, specificReturn := fake.attachCertReturnsOnCall[len(fake.attachCertArgsForCall)]
	fake.attachCertArgsForCall = append(fake.attachCertArgsForCall, struct {
		arg1 api.Domain
		arg2 api.CertParams
	}{arg1, arg2})
	fake.recordInvocation("AttachCert", []interface{}{arg1, arg2})
	fake.attachCertMutex.Unlock()
	if fake.AttachCertStub != nil {
		return fake.AttachCertStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.attachCertReturns.result1
}

func (fake *FakeDomainRepository) AttachCertCallCount() int {
	fake.attachCertMutex.RLock()
	defer fake.attachCertMutex.RUnlock()
	return len(fake.attachCertArgsForCall)
}

func (fake *FakeDomainRepository) AttachCertArgsForCall(i int) (api.Domain, api.CertParams) {
	fake.attachCertMutex.RLock()
	defer fake.attachCertMutex.RUnlock()
	return fake.attachCertArgsForCall[i].arg1, fake.attachCertArgsForCall[i].arg2
}

func (fake *FakeDomainRepository) AttachCertReturns(result1 error) {
	fake.AttachCertStub = nil
	fake.attachCertReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDomainRepository) AttachCertReturnsOnCall(i int, result1 error) {
	fake.AttachCertStub = nil
	if fake.attachCertReturnsOnCall == nil {
		fake.attachCertReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.attachCertReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDomainRepository) Delete(id string) (apiErr error) {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		id string
	}{id})
	fake.recordInvocation("Delete", []interface{}{id})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(id)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteReturns.result1
}

func (fake *FakeDomainRepository) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeDomainRepository) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].id
}

func (fake *FakeDomainRepository) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDomainRepository) DeleteReturnsOnCall(i int, result1 error) {
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDomainRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.getDomainMutex.RLock()
	defer fake.getDomainMutex.RUnlock()
	fake.getDomainsMutex.RLock()
	defer fake.getDomainsMutex.RUnlock()
	fake.attachCertMutex.RLock()
	defer fake.attachCertMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDomainRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.DomainRepository = new(FakeDomainRepository)
