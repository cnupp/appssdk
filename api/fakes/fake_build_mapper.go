// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cnupp/appssdk/api"
)

type FakeBuildMapper struct {
	CreateStub        func(app api.App, params api.BuildParams) (build api.Build, apiErr error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		app    api.App
		params api.BuildParams
	}
	createReturns struct {
		result1 api.Build
		result2 error
	}
	GetBuildsStub        func(app api.App) (builds api.Builds, apiErr error)
	getBuildsMutex       sync.RWMutex
	getBuildsArgsForCall []struct {
		app api.App
	}
	getBuildsReturns struct {
		result1 api.Builds
		result2 error
	}
	GetBuildStub        func(app api.App, id string) (build api.Build, apiErr error)
	getBuildMutex       sync.RWMutex
	getBuildArgsForCall []struct {
		app api.App
		id  string
	}
	getBuildReturns struct {
		result1 api.Build
		result2 error
	}
	UpdateStub        func(id string, params api.BuildParams) (updatedBuild api.Build, apiErr error)
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		id     string
		params api.BuildParams
	}
	updateReturns struct {
		result1 api.Build
		result2 error
	}
	SuccessStub        func(build api.Build) (apiErr error)
	successMutex       sync.RWMutex
	successArgsForCall []struct {
		build api.Build
	}
	successReturns struct {
		result1 error
	}
	FailStub        func(build api.Build) (apiErr error)
	failMutex       sync.RWMutex
	failArgsForCall []struct {
		build api.Build
	}
	failReturns struct {
		result1 error
	}
	VerifySuccessStub        func(build api.Build) (apiErr error)
	verifySuccessMutex       sync.RWMutex
	verifySuccessArgsForCall []struct {
		build api.Build
	}
	verifySuccessReturns struct {
		result1 error
	}
	VerifyFailStub        func(build api.Build) (apiErr error)
	verifyFailMutex       sync.RWMutex
	verifyFailArgsForCall []struct {
		build api.Build
	}
	verifyFailReturns struct {
		result1 error
	}
	invocations map[string][][]interface{}
}

func (fake *FakeBuildMapper) Create(app api.App, params api.BuildParams) (build api.Build, apiErr error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		app    api.App
		params api.BuildParams
	}{app, params})
	fake.guard("Create")
	fake.invocations["Create"] = append(fake.invocations["Create"], []interface{}{app, params})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(app, params)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2
	}
}

func (fake *FakeBuildMapper) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeBuildMapper) CreateArgsForCall(i int) (api.App, api.BuildParams) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].app, fake.createArgsForCall[i].params
}

func (fake *FakeBuildMapper) CreateReturns(result1 api.Build, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 api.Build
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildMapper) GetBuilds(app api.App) (builds api.Builds, apiErr error) {
	fake.getBuildsMutex.Lock()
	fake.getBuildsArgsForCall = append(fake.getBuildsArgsForCall, struct {
		app api.App
	}{app})
	fake.guard("GetBuilds")
	fake.invocations["GetBuilds"] = append(fake.invocations["GetBuilds"], []interface{}{app})
	fake.getBuildsMutex.Unlock()
	if fake.GetBuildsStub != nil {
		return fake.GetBuildsStub(app)
	} else {
		return fake.getBuildsReturns.result1, fake.getBuildsReturns.result2
	}
}

func (fake *FakeBuildMapper) GetBuildsCallCount() int {
	fake.getBuildsMutex.RLock()
	defer fake.getBuildsMutex.RUnlock()
	return len(fake.getBuildsArgsForCall)
}

func (fake *FakeBuildMapper) GetBuildsArgsForCall(i int) api.App {
	fake.getBuildsMutex.RLock()
	defer fake.getBuildsMutex.RUnlock()
	return fake.getBuildsArgsForCall[i].app
}

func (fake *FakeBuildMapper) GetBuildsReturns(result1 api.Builds, result2 error) {
	fake.GetBuildsStub = nil
	fake.getBuildsReturns = struct {
		result1 api.Builds
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildMapper) GetBuild(app api.App, id string) (build api.Build, apiErr error) {
	fake.getBuildMutex.Lock()
	fake.getBuildArgsForCall = append(fake.getBuildArgsForCall, struct {
		app api.App
		id  string
	}{app, id})
	fake.guard("GetBuild")
	fake.invocations["GetBuild"] = append(fake.invocations["GetBuild"], []interface{}{app, id})
	fake.getBuildMutex.Unlock()
	if fake.GetBuildStub != nil {
		return fake.GetBuildStub(app, id)
	} else {
		return fake.getBuildReturns.result1, fake.getBuildReturns.result2
	}
}

func (fake *FakeBuildMapper) GetBuildCallCount() int {
	fake.getBuildMutex.RLock()
	defer fake.getBuildMutex.RUnlock()
	return len(fake.getBuildArgsForCall)
}

func (fake *FakeBuildMapper) GetBuildArgsForCall(i int) (api.App, string) {
	fake.getBuildMutex.RLock()
	defer fake.getBuildMutex.RUnlock()
	return fake.getBuildArgsForCall[i].app, fake.getBuildArgsForCall[i].id
}

func (fake *FakeBuildMapper) GetBuildReturns(result1 api.Build, result2 error) {
	fake.GetBuildStub = nil
	fake.getBuildReturns = struct {
		result1 api.Build
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildMapper) Update(id string, params api.BuildParams) (updatedBuild api.Build, apiErr error) {
	fake.updateMutex.Lock()
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		id     string
		params api.BuildParams
	}{id, params})
	fake.guard("Update")
	fake.invocations["Update"] = append(fake.invocations["Update"], []interface{}{id, params})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub(id, params)
	} else {
		return fake.updateReturns.result1, fake.updateReturns.result2
	}
}

func (fake *FakeBuildMapper) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeBuildMapper) UpdateArgsForCall(i int) (string, api.BuildParams) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return fake.updateArgsForCall[i].id, fake.updateArgsForCall[i].params
}

func (fake *FakeBuildMapper) UpdateReturns(result1 api.Build, result2 error) {
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 api.Build
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildMapper) Success(build api.Build) (apiErr error) {
	fake.successMutex.Lock()
	fake.successArgsForCall = append(fake.successArgsForCall, struct {
		build api.Build
	}{build})
	fake.guard("Success")
	fake.invocations["Success"] = append(fake.invocations["Success"], []interface{}{build})
	fake.successMutex.Unlock()
	if fake.SuccessStub != nil {
		return fake.SuccessStub(build)
	} else {
		return fake.successReturns.result1
	}
}

func (fake *FakeBuildMapper) SuccessCallCount() int {
	fake.successMutex.RLock()
	defer fake.successMutex.RUnlock()
	return len(fake.successArgsForCall)
}

func (fake *FakeBuildMapper) SuccessArgsForCall(i int) api.Build {
	fake.successMutex.RLock()
	defer fake.successMutex.RUnlock()
	return fake.successArgsForCall[i].build
}

func (fake *FakeBuildMapper) SuccessReturns(result1 error) {
	fake.SuccessStub = nil
	fake.successReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuildMapper) Fail(build api.Build) (apiErr error) {
	fake.failMutex.Lock()
	fake.failArgsForCall = append(fake.failArgsForCall, struct {
		build api.Build
	}{build})
	fake.guard("Fail")
	fake.invocations["Fail"] = append(fake.invocations["Fail"], []interface{}{build})
	fake.failMutex.Unlock()
	if fake.FailStub != nil {
		return fake.FailStub(build)
	} else {
		return fake.failReturns.result1
	}
}

func (fake *FakeBuildMapper) FailCallCount() int {
	fake.failMutex.RLock()
	defer fake.failMutex.RUnlock()
	return len(fake.failArgsForCall)
}

func (fake *FakeBuildMapper) FailArgsForCall(i int) api.Build {
	fake.failMutex.RLock()
	defer fake.failMutex.RUnlock()
	return fake.failArgsForCall[i].build
}

func (fake *FakeBuildMapper) FailReturns(result1 error) {
	fake.FailStub = nil
	fake.failReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuildMapper) VerifySuccess(build api.Build) (apiErr error) {
	fake.verifySuccessMutex.Lock()
	fake.verifySuccessArgsForCall = append(fake.verifySuccessArgsForCall, struct {
		build api.Build
	}{build})
	fake.guard("VerifySuccess")
	fake.invocations["VerifySuccess"] = append(fake.invocations["VerifySuccess"], []interface{}{build})
	fake.verifySuccessMutex.Unlock()
	if fake.VerifySuccessStub != nil {
		return fake.VerifySuccessStub(build)
	} else {
		return fake.verifySuccessReturns.result1
	}
}

func (fake *FakeBuildMapper) VerifySuccessCallCount() int {
	fake.verifySuccessMutex.RLock()
	defer fake.verifySuccessMutex.RUnlock()
	return len(fake.verifySuccessArgsForCall)
}

func (fake *FakeBuildMapper) VerifySuccessArgsForCall(i int) api.Build {
	fake.verifySuccessMutex.RLock()
	defer fake.verifySuccessMutex.RUnlock()
	return fake.verifySuccessArgsForCall[i].build
}

func (fake *FakeBuildMapper) VerifySuccessReturns(result1 error) {
	fake.VerifySuccessStub = nil
	fake.verifySuccessReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuildMapper) VerifyFail(build api.Build) (apiErr error) {
	fake.verifyFailMutex.Lock()
	fake.verifyFailArgsForCall = append(fake.verifyFailArgsForCall, struct {
		build api.Build
	}{build})
	fake.guard("VerifyFail")
	fake.invocations["VerifyFail"] = append(fake.invocations["VerifyFail"], []interface{}{build})
	fake.verifyFailMutex.Unlock()
	if fake.VerifyFailStub != nil {
		return fake.VerifyFailStub(build)
	} else {
		return fake.verifyFailReturns.result1
	}
}

func (fake *FakeBuildMapper) VerifyFailCallCount() int {
	fake.verifyFailMutex.RLock()
	defer fake.verifyFailMutex.RUnlock()
	return len(fake.verifyFailArgsForCall)
}

func (fake *FakeBuildMapper) VerifyFailArgsForCall(i int) api.Build {
	fake.verifyFailMutex.RLock()
	defer fake.verifyFailMutex.RUnlock()
	return fake.verifyFailArgsForCall[i].build
}

func (fake *FakeBuildMapper) VerifyFailReturns(result1 error) {
	fake.VerifyFailStub = nil
	fake.verifyFailReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuildMapper) Invocations() map[string][][]interface{} {
	return fake.invocations
}

func (fake *FakeBuildMapper) guard(key string) {
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
}

var _ api.BuildMapper = new(FakeBuildMapper)
