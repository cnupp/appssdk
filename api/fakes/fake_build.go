// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/sjkyspa/stacks/controller/api/api"
)

type FakeBuild struct {
	IdStub        func() string
	idMutex       sync.RWMutex
	idArgsForCall []struct{}
	idReturns     struct {
		result1 string
	}
	GitShaStub        func() string
	gitShaMutex       sync.RWMutex
	gitShaArgsForCall []struct{}
	gitShaReturns     struct {
		result1 string
	}
	StatusStub        func() string
	statusMutex       sync.RWMutex
	statusArgsForCall []struct{}
	statusReturns     struct {
		result1 string
	}
	VerifyStub        func() api.Verify
	verifyMutex       sync.RWMutex
	verifyArgsForCall []struct{}
	verifyReturns     struct {
		result1 api.Verify
	}
	LinksStub        func() api.Links
	linksMutex       sync.RWMutex
	linksArgsForCall []struct{}
	linksReturns     struct {
		result1 api.Links
	}
	GetAppStub        func() api.App
	getAppMutex       sync.RWMutex
	getAppArgsForCall []struct{}
	getAppReturns     struct {
		result1 api.App
	}
	SuccessStub        func() error
	successMutex       sync.RWMutex
	successArgsForCall []struct{}
	successReturns     struct {
		result1 error
	}
	FailStub        func() error
	failMutex       sync.RWMutex
	failArgsForCall []struct{}
	failReturns     struct {
		result1 error
	}
	IsSuccessStub        func() bool
	isSuccessMutex       sync.RWMutex
	isSuccessArgsForCall []struct{}
	isSuccessReturns     struct {
		result1 bool
	}
	IsFailStub        func() bool
	isFailMutex       sync.RWMutex
	isFailArgsForCall []struct{}
	isFailReturns     struct {
		result1 bool
	}
	VerifySuccessStub        func() error
	verifySuccessMutex       sync.RWMutex
	verifySuccessArgsForCall []struct{}
	verifySuccessReturns     struct {
		result1 error
	}
	IsVerifySuccessStub        func() bool
	isVerifySuccessMutex       sync.RWMutex
	isVerifySuccessArgsForCall []struct{}
	isVerifySuccessReturns     struct {
		result1 bool
	}
	VerifyFailStub        func() error
	verifyFailMutex       sync.RWMutex
	verifyFailArgsForCall []struct{}
	verifyFailReturns     struct {
		result1 error
	}
	IsVerifyFailStub        func() bool
	isVerifyFailMutex       sync.RWMutex
	isVerifyFailArgsForCall []struct{}
	isVerifyFailReturns     struct {
		result1 bool
	}
	invocations map[string][][]interface{}
}

func (fake *FakeBuild) Id() string {
	fake.idMutex.Lock()
	fake.idArgsForCall = append(fake.idArgsForCall, struct{}{})
	fake.guard("Id")
	fake.invocations["Id"] = append(fake.invocations["Id"], []interface{}{})
	fake.idMutex.Unlock()
	if fake.IdStub != nil {
		return fake.IdStub()
	} else {
		return fake.idReturns.result1
	}
}

func (fake *FakeBuild) IdCallCount() int {
	fake.idMutex.RLock()
	defer fake.idMutex.RUnlock()
	return len(fake.idArgsForCall)
}

func (fake *FakeBuild) IdReturns(result1 string) {
	fake.IdStub = nil
	fake.idReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeBuild) GitSha() string {
	fake.gitShaMutex.Lock()
	fake.gitShaArgsForCall = append(fake.gitShaArgsForCall, struct{}{})
	fake.guard("GitSha")
	fake.invocations["GitSha"] = append(fake.invocations["GitSha"], []interface{}{})
	fake.gitShaMutex.Unlock()
	if fake.GitShaStub != nil {
		return fake.GitShaStub()
	} else {
		return fake.gitShaReturns.result1
	}
}

func (fake *FakeBuild) GitShaCallCount() int {
	fake.gitShaMutex.RLock()
	defer fake.gitShaMutex.RUnlock()
	return len(fake.gitShaArgsForCall)
}

func (fake *FakeBuild) GitShaReturns(result1 string) {
	fake.GitShaStub = nil
	fake.gitShaReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeBuild) Status() string {
	fake.statusMutex.Lock()
	fake.statusArgsForCall = append(fake.statusArgsForCall, struct{}{})
	fake.guard("Status")
	fake.invocations["Status"] = append(fake.invocations["Status"], []interface{}{})
	fake.statusMutex.Unlock()
	if fake.StatusStub != nil {
		return fake.StatusStub()
	} else {
		return fake.statusReturns.result1
	}
}

func (fake *FakeBuild) StatusCallCount() int {
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	return len(fake.statusArgsForCall)
}

func (fake *FakeBuild) StatusReturns(result1 string) {
	fake.StatusStub = nil
	fake.statusReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeBuild) Verify() api.Verify {
	fake.verifyMutex.Lock()
	fake.verifyArgsForCall = append(fake.verifyArgsForCall, struct{}{})
	fake.guard("Verify")
	fake.invocations["Verify"] = append(fake.invocations["Verify"], []interface{}{})
	fake.verifyMutex.Unlock()
	if fake.VerifyStub != nil {
		return fake.VerifyStub()
	} else {
		return fake.verifyReturns.result1
	}
}

func (fake *FakeBuild) VerifyCallCount() int {
	fake.verifyMutex.RLock()
	defer fake.verifyMutex.RUnlock()
	return len(fake.verifyArgsForCall)
}

func (fake *FakeBuild) VerifyReturns(result1 api.Verify) {
	fake.VerifyStub = nil
	fake.verifyReturns = struct {
		result1 api.Verify
	}{result1}
}

func (fake *FakeBuild) Links() api.Links {
	fake.linksMutex.Lock()
	fake.linksArgsForCall = append(fake.linksArgsForCall, struct{}{})
	fake.guard("Links")
	fake.invocations["Links"] = append(fake.invocations["Links"], []interface{}{})
	fake.linksMutex.Unlock()
	if fake.LinksStub != nil {
		return fake.LinksStub()
	} else {
		return fake.linksReturns.result1
	}
}

func (fake *FakeBuild) LinksCallCount() int {
	fake.linksMutex.RLock()
	defer fake.linksMutex.RUnlock()
	return len(fake.linksArgsForCall)
}

func (fake *FakeBuild) LinksReturns(result1 api.Links) {
	fake.LinksStub = nil
	fake.linksReturns = struct {
		result1 api.Links
	}{result1}
}

func (fake *FakeBuild) GetApp() api.App {
	fake.getAppMutex.Lock()
	fake.getAppArgsForCall = append(fake.getAppArgsForCall, struct{}{})
	fake.guard("GetApp")
	fake.invocations["GetApp"] = append(fake.invocations["GetApp"], []interface{}{})
	fake.getAppMutex.Unlock()
	if fake.GetAppStub != nil {
		return fake.GetAppStub()
	} else {
		return fake.getAppReturns.result1
	}
}

func (fake *FakeBuild) GetAppCallCount() int {
	fake.getAppMutex.RLock()
	defer fake.getAppMutex.RUnlock()
	return len(fake.getAppArgsForCall)
}

func (fake *FakeBuild) GetAppReturns(result1 api.App) {
	fake.GetAppStub = nil
	fake.getAppReturns = struct {
		result1 api.App
	}{result1}
}

func (fake *FakeBuild) Success() error {
	fake.successMutex.Lock()
	fake.successArgsForCall = append(fake.successArgsForCall, struct{}{})
	fake.guard("Success")
	fake.invocations["Success"] = append(fake.invocations["Success"], []interface{}{})
	fake.successMutex.Unlock()
	if fake.SuccessStub != nil {
		return fake.SuccessStub()
	} else {
		return fake.successReturns.result1
	}
}

func (fake *FakeBuild) SuccessCallCount() int {
	fake.successMutex.RLock()
	defer fake.successMutex.RUnlock()
	return len(fake.successArgsForCall)
}

func (fake *FakeBuild) SuccessReturns(result1 error) {
	fake.SuccessStub = nil
	fake.successReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuild) Fail() error {
	fake.failMutex.Lock()
	fake.failArgsForCall = append(fake.failArgsForCall, struct{}{})
	fake.guard("Fail")
	fake.invocations["Fail"] = append(fake.invocations["Fail"], []interface{}{})
	fake.failMutex.Unlock()
	if fake.FailStub != nil {
		return fake.FailStub()
	} else {
		return fake.failReturns.result1
	}
}

func (fake *FakeBuild) FailCallCount() int {
	fake.failMutex.RLock()
	defer fake.failMutex.RUnlock()
	return len(fake.failArgsForCall)
}

func (fake *FakeBuild) FailReturns(result1 error) {
	fake.FailStub = nil
	fake.failReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuild) IsSuccess() bool {
	fake.isSuccessMutex.Lock()
	fake.isSuccessArgsForCall = append(fake.isSuccessArgsForCall, struct{}{})
	fake.guard("IsSuccess")
	fake.invocations["IsSuccess"] = append(fake.invocations["IsSuccess"], []interface{}{})
	fake.isSuccessMutex.Unlock()
	if fake.IsSuccessStub != nil {
		return fake.IsSuccessStub()
	} else {
		return fake.isSuccessReturns.result1
	}
}

func (fake *FakeBuild) IsSuccessCallCount() int {
	fake.isSuccessMutex.RLock()
	defer fake.isSuccessMutex.RUnlock()
	return len(fake.isSuccessArgsForCall)
}

func (fake *FakeBuild) IsSuccessReturns(result1 bool) {
	fake.IsSuccessStub = nil
	fake.isSuccessReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeBuild) IsFail() bool {
	fake.isFailMutex.Lock()
	fake.isFailArgsForCall = append(fake.isFailArgsForCall, struct{}{})
	fake.guard("IsFail")
	fake.invocations["IsFail"] = append(fake.invocations["IsFail"], []interface{}{})
	fake.isFailMutex.Unlock()
	if fake.IsFailStub != nil {
		return fake.IsFailStub()
	} else {
		return fake.isFailReturns.result1
	}
}

func (fake *FakeBuild) IsFailCallCount() int {
	fake.isFailMutex.RLock()
	defer fake.isFailMutex.RUnlock()
	return len(fake.isFailArgsForCall)
}

func (fake *FakeBuild) IsFailReturns(result1 bool) {
	fake.IsFailStub = nil
	fake.isFailReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeBuild) VerifySuccess() error {
	fake.verifySuccessMutex.Lock()
	fake.verifySuccessArgsForCall = append(fake.verifySuccessArgsForCall, struct{}{})
	fake.guard("VerifySuccess")
	fake.invocations["VerifySuccess"] = append(fake.invocations["VerifySuccess"], []interface{}{})
	fake.verifySuccessMutex.Unlock()
	if fake.VerifySuccessStub != nil {
		return fake.VerifySuccessStub()
	} else {
		return fake.verifySuccessReturns.result1
	}
}

func (fake *FakeBuild) VerifySuccessCallCount() int {
	fake.verifySuccessMutex.RLock()
	defer fake.verifySuccessMutex.RUnlock()
	return len(fake.verifySuccessArgsForCall)
}

func (fake *FakeBuild) VerifySuccessReturns(result1 error) {
	fake.VerifySuccessStub = nil
	fake.verifySuccessReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuild) IsVerifySuccess() bool {
	fake.isVerifySuccessMutex.Lock()
	fake.isVerifySuccessArgsForCall = append(fake.isVerifySuccessArgsForCall, struct{}{})
	fake.guard("IsVerifySuccess")
	fake.invocations["IsVerifySuccess"] = append(fake.invocations["IsVerifySuccess"], []interface{}{})
	fake.isVerifySuccessMutex.Unlock()
	if fake.IsVerifySuccessStub != nil {
		return fake.IsVerifySuccessStub()
	} else {
		return fake.isVerifySuccessReturns.result1
	}
}

func (fake *FakeBuild) IsVerifySuccessCallCount() int {
	fake.isVerifySuccessMutex.RLock()
	defer fake.isVerifySuccessMutex.RUnlock()
	return len(fake.isVerifySuccessArgsForCall)
}

func (fake *FakeBuild) IsVerifySuccessReturns(result1 bool) {
	fake.IsVerifySuccessStub = nil
	fake.isVerifySuccessReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeBuild) VerifyFail() error {
	fake.verifyFailMutex.Lock()
	fake.verifyFailArgsForCall = append(fake.verifyFailArgsForCall, struct{}{})
	fake.guard("VerifyFail")
	fake.invocations["VerifyFail"] = append(fake.invocations["VerifyFail"], []interface{}{})
	fake.verifyFailMutex.Unlock()
	if fake.VerifyFailStub != nil {
		return fake.VerifyFailStub()
	} else {
		return fake.verifyFailReturns.result1
	}
}

func (fake *FakeBuild) VerifyFailCallCount() int {
	fake.verifyFailMutex.RLock()
	defer fake.verifyFailMutex.RUnlock()
	return len(fake.verifyFailArgsForCall)
}

func (fake *FakeBuild) VerifyFailReturns(result1 error) {
	fake.VerifyFailStub = nil
	fake.verifyFailReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuild) IsVerifyFail() bool {
	fake.isVerifyFailMutex.Lock()
	fake.isVerifyFailArgsForCall = append(fake.isVerifyFailArgsForCall, struct{}{})
	fake.guard("IsVerifyFail")
	fake.invocations["IsVerifyFail"] = append(fake.invocations["IsVerifyFail"], []interface{}{})
	fake.isVerifyFailMutex.Unlock()
	if fake.IsVerifyFailStub != nil {
		return fake.IsVerifyFailStub()
	} else {
		return fake.isVerifyFailReturns.result1
	}
}

func (fake *FakeBuild) IsVerifyFailCallCount() int {
	fake.isVerifyFailMutex.RLock()
	defer fake.isVerifyFailMutex.RUnlock()
	return len(fake.isVerifyFailArgsForCall)
}

func (fake *FakeBuild) IsVerifyFailReturns(result1 bool) {
	fake.IsVerifyFailStub = nil
	fake.isVerifyFailReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeBuild) Invocations() map[string][][]interface{} {
	return fake.invocations
}

func (fake *FakeBuild) guard(key string) {
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
}

var _ api.Build = new(FakeBuild)
