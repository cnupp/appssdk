// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/cnupp/appssdk/api"
)

type FakeAppRepository struct {
	CreateStub        func(params api.AppParams) (createdApp api.App, apiErr error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		params api.AppParams
	}
	createReturns struct {
		result1 api.App
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 api.App
		result2 error
	}
	GetAppStub        func(id string) (api.App, error)
	getAppMutex       sync.RWMutex
	getAppArgsForCall []struct {
		id string
	}
	getAppReturns struct {
		result1 api.App
		result2 error
	}
	getAppReturnsOnCall map[int]struct {
		result1 api.App
		result2 error
	}
	GetAppsStub        func() (api.Apps, error)
	getAppsMutex       sync.RWMutex
	getAppsArgsForCall []struct{}
	getAppsReturns     struct {
		result1 api.Apps
		result2 error
	}
	getAppsReturnsOnCall map[int]struct {
		result1 api.Apps
		result2 error
	}
	DeleteStub        func(id string) (apiErr error)
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		id string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	BindWithRouteStub        func(app api.App, params api.AppRouteParams) error
	bindWithRouteMutex       sync.RWMutex
	bindWithRouteArgsForCall []struct {
		app    api.App
		params api.AppRouteParams
	}
	bindWithRouteReturns struct {
		result1 error
	}
	bindWithRouteReturnsOnCall map[int]struct {
		result1 error
	}
	UnbindRouteStub        func(app api.App, routeId string) error
	unbindRouteMutex       sync.RWMutex
	unbindRouteArgsForCall []struct {
		app     api.App
		routeId string
	}
	unbindRouteReturns struct {
		result1 error
	}
	unbindRouteReturnsOnCall map[int]struct {
		result1 error
	}
	GetRoutesStub        func(app api.App) (routes api.AppRoutes, apiErr error)
	getRoutesMutex       sync.RWMutex
	getRoutesArgsForCall []struct {
		app api.App
	}
	getRoutesReturns struct {
		result1 api.AppRoutes
		result2 error
	}
	getRoutesReturnsOnCall map[int]struct {
		result1 api.AppRoutes
		result2 error
	}
	GetRoutesByURIStub        func(uri string) (routes api.AppRoutes, apiErr error)
	getRoutesByURIMutex       sync.RWMutex
	getRoutesByURIArgsForCall []struct {
		uri string
	}
	getRoutesByURIReturns struct {
		result1 api.AppRoutes
		result2 error
	}
	getRoutesByURIReturnsOnCall map[int]struct {
		result1 api.AppRoutes
		result2 error
	}
	SetEnvStub        func(app api.App, kvs map[string]interface{}) error
	setEnvMutex       sync.RWMutex
	setEnvArgsForCall []struct {
		app api.App
		kvs map[string]interface{}
	}
	setEnvReturns struct {
		result1 error
	}
	setEnvReturnsOnCall map[int]struct {
		result1 error
	}
	UnsetEnvStub        func(app api.App, keys []string) error
	unsetEnvMutex       sync.RWMutex
	unsetEnvArgsForCall []struct {
		app  api.App
		keys []string
	}
	unsetEnvReturns struct {
		result1 error
	}
	unsetEnvReturnsOnCall map[int]struct {
		result1 error
	}
	SwitchStackStub        func(id string, params api.UpdateStackParams) (apiErr error)
	switchStackMutex       sync.RWMutex
	switchStackArgsForCall []struct {
		id     string
		params api.UpdateStackParams
	}
	switchStackReturns struct {
		result1 error
	}
	switchStackReturnsOnCall map[int]struct {
		result1 error
	}
	GetLogStub        func(appId, buildId, logType string, lines int64, offset int64) (api.LogsModel, error)
	getLogMutex       sync.RWMutex
	getLogArgsForCall []struct {
		appId   string
		buildId string
		logType string
		lines   int64
		offset  int64
	}
	getLogReturns struct {
		result1 api.LogsModel
		result2 error
	}
	getLogReturnsOnCall map[int]struct {
		result1 api.LogsModel
		result2 error
	}
	GetPermissionStub        func(app api.App, userId string) (api.AppPermission, error)
	getPermissionMutex       sync.RWMutex
	getPermissionArgsForCall []struct {
		app    api.App
		userId string
	}
	getPermissionReturns struct {
		result1 api.AppPermission
		result2 error
	}
	getPermissionReturnsOnCall map[int]struct {
		result1 api.AppPermission
		result2 error
	}
	GetCollaboratorsStub        func(appId string) ([]api.UserModel, error)
	getCollaboratorsMutex       sync.RWMutex
	getCollaboratorsArgsForCall []struct {
		appId string
	}
	getCollaboratorsReturns struct {
		result1 []api.UserModel
		result2 error
	}
	getCollaboratorsReturnsOnCall map[int]struct {
		result1 []api.UserModel
		result2 error
	}
	AddCollaboratorStub        func(appId string, param api.CreateCollaboratorParams) error
	addCollaboratorMutex       sync.RWMutex
	addCollaboratorArgsForCall []struct {
		appId string
		param api.CreateCollaboratorParams
	}
	addCollaboratorReturns struct {
		result1 error
	}
	addCollaboratorReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveCollaboratorStub        func(appId string, userId string) error
	removeCollaboratorMutex       sync.RWMutex
	removeCollaboratorArgsForCall []struct {
		appId  string
		userId string
	}
	removeCollaboratorReturns struct {
		result1 error
	}
	removeCollaboratorReturnsOnCall map[int]struct {
		result1 error
	}
	TransferToUserStub        func(appId string, email string) error
	transferToUserMutex       sync.RWMutex
	transferToUserArgsForCall []struct {
		appId string
		email string
	}
	transferToUserReturns struct {
		result1 error
	}
	transferToUserReturnsOnCall map[int]struct {
		result1 error
	}
	TransferToOrgStub        func(appId string, orgName string) error
	transferToOrgMutex       sync.RWMutex
	transferToOrgArgsForCall []struct {
		appId   string
		orgName string
	}
	transferToOrgReturns struct {
		result1 error
	}
	transferToOrgReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAppRepository) Create(params api.AppParams) (createdApp api.App, apiErr error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		params api.AppParams
	}{params})
	fake.recordInvocation("Create", []interface{}{params})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(params)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createReturns.result1, fake.createReturns.result2
}

func (fake *FakeAppRepository) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeAppRepository) CreateArgsForCall(i int) api.AppParams {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].params
}

func (fake *FakeAppRepository) CreateReturns(result1 api.App, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 api.App
		result2 error
	}{result1, result2}
}

func (fake *FakeAppRepository) CreateReturnsOnCall(i int, result1 api.App, result2 error) {
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 api.App
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 api.App
		result2 error
	}{result1, result2}
}

func (fake *FakeAppRepository) GetApp(id string) (api.App, error) {
	fake.getAppMutex.Lock()
	ret, specificReturn := fake.getAppReturnsOnCall[len(fake.getAppArgsForCall)]
	fake.getAppArgsForCall = append(fake.getAppArgsForCall, struct {
		id string
	}{id})
	fake.recordInvocation("GetApp", []interface{}{id})
	fake.getAppMutex.Unlock()
	if fake.GetAppStub != nil {
		return fake.GetAppStub(id)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getAppReturns.result1, fake.getAppReturns.result2
}

func (fake *FakeAppRepository) GetAppCallCount() int {
	fake.getAppMutex.RLock()
	defer fake.getAppMutex.RUnlock()
	return len(fake.getAppArgsForCall)
}

func (fake *FakeAppRepository) GetAppArgsForCall(i int) string {
	fake.getAppMutex.RLock()
	defer fake.getAppMutex.RUnlock()
	return fake.getAppArgsForCall[i].id
}

func (fake *FakeAppRepository) GetAppReturns(result1 api.App, result2 error) {
	fake.GetAppStub = nil
	fake.getAppReturns = struct {
		result1 api.App
		result2 error
	}{result1, result2}
}

func (fake *FakeAppRepository) GetAppReturnsOnCall(i int, result1 api.App, result2 error) {
	fake.GetAppStub = nil
	if fake.getAppReturnsOnCall == nil {
		fake.getAppReturnsOnCall = make(map[int]struct {
			result1 api.App
			result2 error
		})
	}
	fake.getAppReturnsOnCall[i] = struct {
		result1 api.App
		result2 error
	}{result1, result2}
}

func (fake *FakeAppRepository) GetApps() (api.Apps, error) {
	fake.getAppsMutex.Lock()
	ret, specificReturn := fake.getAppsReturnsOnCall[len(fake.getAppsArgsForCall)]
	fake.getAppsArgsForCall = append(fake.getAppsArgsForCall, struct{}{})
	fake.recordInvocation("GetApps", []interface{}{})
	fake.getAppsMutex.Unlock()
	if fake.GetAppsStub != nil {
		return fake.GetAppsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getAppsReturns.result1, fake.getAppsReturns.result2
}

func (fake *FakeAppRepository) GetAppsCallCount() int {
	fake.getAppsMutex.RLock()
	defer fake.getAppsMutex.RUnlock()
	return len(fake.getAppsArgsForCall)
}

func (fake *FakeAppRepository) GetAppsReturns(result1 api.Apps, result2 error) {
	fake.GetAppsStub = nil
	fake.getAppsReturns = struct {
		result1 api.Apps
		result2 error
	}{result1, result2}
}

func (fake *FakeAppRepository) GetAppsReturnsOnCall(i int, result1 api.Apps, result2 error) {
	fake.GetAppsStub = nil
	if fake.getAppsReturnsOnCall == nil {
		fake.getAppsReturnsOnCall = make(map[int]struct {
			result1 api.Apps
			result2 error
		})
	}
	fake.getAppsReturnsOnCall[i] = struct {
		result1 api.Apps
		result2 error
	}{result1, result2}
}

func (fake *FakeAppRepository) Delete(id string) (apiErr error) {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		id string
	}{id})
	fake.recordInvocation("Delete", []interface{}{id})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(id)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteReturns.result1
}

func (fake *FakeAppRepository) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeAppRepository) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].id
}

func (fake *FakeAppRepository) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppRepository) DeleteReturnsOnCall(i int, result1 error) {
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppRepository) BindWithRoute(app api.App, params api.AppRouteParams) error {
	fake.bindWithRouteMutex.Lock()
	ret, specificReturn := fake.bindWithRouteReturnsOnCall[len(fake.bindWithRouteArgsForCall)]
	fake.bindWithRouteArgsForCall = append(fake.bindWithRouteArgsForCall, struct {
		app    api.App
		params api.AppRouteParams
	}{app, params})
	fake.recordInvocation("BindWithRoute", []interface{}{app, params})
	fake.bindWithRouteMutex.Unlock()
	if fake.BindWithRouteStub != nil {
		return fake.BindWithRouteStub(app, params)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.bindWithRouteReturns.result1
}

func (fake *FakeAppRepository) BindWithRouteCallCount() int {
	fake.bindWithRouteMutex.RLock()
	defer fake.bindWithRouteMutex.RUnlock()
	return len(fake.bindWithRouteArgsForCall)
}

func (fake *FakeAppRepository) BindWithRouteArgsForCall(i int) (api.App, api.AppRouteParams) {
	fake.bindWithRouteMutex.RLock()
	defer fake.bindWithRouteMutex.RUnlock()
	return fake.bindWithRouteArgsForCall[i].app, fake.bindWithRouteArgsForCall[i].params
}

func (fake *FakeAppRepository) BindWithRouteReturns(result1 error) {
	fake.BindWithRouteStub = nil
	fake.bindWithRouteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppRepository) BindWithRouteReturnsOnCall(i int, result1 error) {
	fake.BindWithRouteStub = nil
	if fake.bindWithRouteReturnsOnCall == nil {
		fake.bindWithRouteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.bindWithRouteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppRepository) UnbindRoute(app api.App, routeId string) error {
	fake.unbindRouteMutex.Lock()
	ret, specificReturn := fake.unbindRouteReturnsOnCall[len(fake.unbindRouteArgsForCall)]
	fake.unbindRouteArgsForCall = append(fake.unbindRouteArgsForCall, struct {
		app     api.App
		routeId string
	}{app, routeId})
	fake.recordInvocation("UnbindRoute", []interface{}{app, routeId})
	fake.unbindRouteMutex.Unlock()
	if fake.UnbindRouteStub != nil {
		return fake.UnbindRouteStub(app, routeId)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.unbindRouteReturns.result1
}

func (fake *FakeAppRepository) UnbindRouteCallCount() int {
	fake.unbindRouteMutex.RLock()
	defer fake.unbindRouteMutex.RUnlock()
	return len(fake.unbindRouteArgsForCall)
}

func (fake *FakeAppRepository) UnbindRouteArgsForCall(i int) (api.App, string) {
	fake.unbindRouteMutex.RLock()
	defer fake.unbindRouteMutex.RUnlock()
	return fake.unbindRouteArgsForCall[i].app, fake.unbindRouteArgsForCall[i].routeId
}

func (fake *FakeAppRepository) UnbindRouteReturns(result1 error) {
	fake.UnbindRouteStub = nil
	fake.unbindRouteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppRepository) UnbindRouteReturnsOnCall(i int, result1 error) {
	fake.UnbindRouteStub = nil
	if fake.unbindRouteReturnsOnCall == nil {
		fake.unbindRouteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unbindRouteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppRepository) GetRoutes(app api.App) (routes api.AppRoutes, apiErr error) {
	fake.getRoutesMutex.Lock()
	ret, specificReturn := fake.getRoutesReturnsOnCall[len(fake.getRoutesArgsForCall)]
	fake.getRoutesArgsForCall = append(fake.getRoutesArgsForCall, struct {
		app api.App
	}{app})
	fake.recordInvocation("GetRoutes", []interface{}{app})
	fake.getRoutesMutex.Unlock()
	if fake.GetRoutesStub != nil {
		return fake.GetRoutesStub(app)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getRoutesReturns.result1, fake.getRoutesReturns.result2
}

func (fake *FakeAppRepository) GetRoutesCallCount() int {
	fake.getRoutesMutex.RLock()
	defer fake.getRoutesMutex.RUnlock()
	return len(fake.getRoutesArgsForCall)
}

func (fake *FakeAppRepository) GetRoutesArgsForCall(i int) api.App {
	fake.getRoutesMutex.RLock()
	defer fake.getRoutesMutex.RUnlock()
	return fake.getRoutesArgsForCall[i].app
}

func (fake *FakeAppRepository) GetRoutesReturns(result1 api.AppRoutes, result2 error) {
	fake.GetRoutesStub = nil
	fake.getRoutesReturns = struct {
		result1 api.AppRoutes
		result2 error
	}{result1, result2}
}

func (fake *FakeAppRepository) GetRoutesReturnsOnCall(i int, result1 api.AppRoutes, result2 error) {
	fake.GetRoutesStub = nil
	if fake.getRoutesReturnsOnCall == nil {
		fake.getRoutesReturnsOnCall = make(map[int]struct {
			result1 api.AppRoutes
			result2 error
		})
	}
	fake.getRoutesReturnsOnCall[i] = struct {
		result1 api.AppRoutes
		result2 error
	}{result1, result2}
}

func (fake *FakeAppRepository) GetRoutesByURI(uri string) (routes api.AppRoutes, apiErr error) {
	fake.getRoutesByURIMutex.Lock()
	ret, specificReturn := fake.getRoutesByURIReturnsOnCall[len(fake.getRoutesByURIArgsForCall)]
	fake.getRoutesByURIArgsForCall = append(fake.getRoutesByURIArgsForCall, struct {
		uri string
	}{uri})
	fake.recordInvocation("GetRoutesByURI", []interface{}{uri})
	fake.getRoutesByURIMutex.Unlock()
	if fake.GetRoutesByURIStub != nil {
		return fake.GetRoutesByURIStub(uri)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getRoutesByURIReturns.result1, fake.getRoutesByURIReturns.result2
}

func (fake *FakeAppRepository) GetRoutesByURICallCount() int {
	fake.getRoutesByURIMutex.RLock()
	defer fake.getRoutesByURIMutex.RUnlock()
	return len(fake.getRoutesByURIArgsForCall)
}

func (fake *FakeAppRepository) GetRoutesByURIArgsForCall(i int) string {
	fake.getRoutesByURIMutex.RLock()
	defer fake.getRoutesByURIMutex.RUnlock()
	return fake.getRoutesByURIArgsForCall[i].uri
}

func (fake *FakeAppRepository) GetRoutesByURIReturns(result1 api.AppRoutes, result2 error) {
	fake.GetRoutesByURIStub = nil
	fake.getRoutesByURIReturns = struct {
		result1 api.AppRoutes
		result2 error
	}{result1, result2}
}

func (fake *FakeAppRepository) GetRoutesByURIReturnsOnCall(i int, result1 api.AppRoutes, result2 error) {
	fake.GetRoutesByURIStub = nil
	if fake.getRoutesByURIReturnsOnCall == nil {
		fake.getRoutesByURIReturnsOnCall = make(map[int]struct {
			result1 api.AppRoutes
			result2 error
		})
	}
	fake.getRoutesByURIReturnsOnCall[i] = struct {
		result1 api.AppRoutes
		result2 error
	}{result1, result2}
}

func (fake *FakeAppRepository) SetEnv(app api.App, kvs map[string]interface{}) error {
	fake.setEnvMutex.Lock()
	ret, specificReturn := fake.setEnvReturnsOnCall[len(fake.setEnvArgsForCall)]
	fake.setEnvArgsForCall = append(fake.setEnvArgsForCall, struct {
		app api.App
		kvs map[string]interface{}
	}{app, kvs})
	fake.recordInvocation("SetEnv", []interface{}{app, kvs})
	fake.setEnvMutex.Unlock()
	if fake.SetEnvStub != nil {
		return fake.SetEnvStub(app, kvs)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.setEnvReturns.result1
}

func (fake *FakeAppRepository) SetEnvCallCount() int {
	fake.setEnvMutex.RLock()
	defer fake.setEnvMutex.RUnlock()
	return len(fake.setEnvArgsForCall)
}

func (fake *FakeAppRepository) SetEnvArgsForCall(i int) (api.App, map[string]interface{}) {
	fake.setEnvMutex.RLock()
	defer fake.setEnvMutex.RUnlock()
	return fake.setEnvArgsForCall[i].app, fake.setEnvArgsForCall[i].kvs
}

func (fake *FakeAppRepository) SetEnvReturns(result1 error) {
	fake.SetEnvStub = nil
	fake.setEnvReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppRepository) SetEnvReturnsOnCall(i int, result1 error) {
	fake.SetEnvStub = nil
	if fake.setEnvReturnsOnCall == nil {
		fake.setEnvReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setEnvReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppRepository) UnsetEnv(app api.App, keys []string) error {
	var keysCopy []string
	if keys != nil {
		keysCopy = make([]string, len(keys))
		copy(keysCopy, keys)
	}
	fake.unsetEnvMutex.Lock()
	ret, specificReturn := fake.unsetEnvReturnsOnCall[len(fake.unsetEnvArgsForCall)]
	fake.unsetEnvArgsForCall = append(fake.unsetEnvArgsForCall, struct {
		app  api.App
		keys []string
	}{app, keysCopy})
	fake.recordInvocation("UnsetEnv", []interface{}{app, keysCopy})
	fake.unsetEnvMutex.Unlock()
	if fake.UnsetEnvStub != nil {
		return fake.UnsetEnvStub(app, keys)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.unsetEnvReturns.result1
}

func (fake *FakeAppRepository) UnsetEnvCallCount() int {
	fake.unsetEnvMutex.RLock()
	defer fake.unsetEnvMutex.RUnlock()
	return len(fake.unsetEnvArgsForCall)
}

func (fake *FakeAppRepository) UnsetEnvArgsForCall(i int) (api.App, []string) {
	fake.unsetEnvMutex.RLock()
	defer fake.unsetEnvMutex.RUnlock()
	return fake.unsetEnvArgsForCall[i].app, fake.unsetEnvArgsForCall[i].keys
}

func (fake *FakeAppRepository) UnsetEnvReturns(result1 error) {
	fake.UnsetEnvStub = nil
	fake.unsetEnvReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppRepository) UnsetEnvReturnsOnCall(i int, result1 error) {
	fake.UnsetEnvStub = nil
	if fake.unsetEnvReturnsOnCall == nil {
		fake.unsetEnvReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unsetEnvReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppRepository) SwitchStack(id string, params api.UpdateStackParams) (apiErr error) {
	fake.switchStackMutex.Lock()
	ret, specificReturn := fake.switchStackReturnsOnCall[len(fake.switchStackArgsForCall)]
	fake.switchStackArgsForCall = append(fake.switchStackArgsForCall, struct {
		id     string
		params api.UpdateStackParams
	}{id, params})
	fake.recordInvocation("SwitchStack", []interface{}{id, params})
	fake.switchStackMutex.Unlock()
	if fake.SwitchStackStub != nil {
		return fake.SwitchStackStub(id, params)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.switchStackReturns.result1
}

func (fake *FakeAppRepository) SwitchStackCallCount() int {
	fake.switchStackMutex.RLock()
	defer fake.switchStackMutex.RUnlock()
	return len(fake.switchStackArgsForCall)
}

func (fake *FakeAppRepository) SwitchStackArgsForCall(i int) (string, api.UpdateStackParams) {
	fake.switchStackMutex.RLock()
	defer fake.switchStackMutex.RUnlock()
	return fake.switchStackArgsForCall[i].id, fake.switchStackArgsForCall[i].params
}

func (fake *FakeAppRepository) SwitchStackReturns(result1 error) {
	fake.SwitchStackStub = nil
	fake.switchStackReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppRepository) SwitchStackReturnsOnCall(i int, result1 error) {
	fake.SwitchStackStub = nil
	if fake.switchStackReturnsOnCall == nil {
		fake.switchStackReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.switchStackReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppRepository) GetLog(appId string, buildId string, logType string, lines int64, offset int64) (api.LogsModel, error) {
	fake.getLogMutex.Lock()
	ret, specificReturn := fake.getLogReturnsOnCall[len(fake.getLogArgsForCall)]
	fake.getLogArgsForCall = append(fake.getLogArgsForCall, struct {
		appId   string
		buildId string
		logType string
		lines   int64
		offset  int64
	}{appId, buildId, logType, lines, offset})
	fake.recordInvocation("GetLog", []interface{}{appId, buildId, logType, lines, offset})
	fake.getLogMutex.Unlock()
	if fake.GetLogStub != nil {
		return fake.GetLogStub(appId, buildId, logType, lines, offset)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getLogReturns.result1, fake.getLogReturns.result2
}

func (fake *FakeAppRepository) GetLogCallCount() int {
	fake.getLogMutex.RLock()
	defer fake.getLogMutex.RUnlock()
	return len(fake.getLogArgsForCall)
}

func (fake *FakeAppRepository) GetLogArgsForCall(i int) (string, string, string, int64, int64) {
	fake.getLogMutex.RLock()
	defer fake.getLogMutex.RUnlock()
	return fake.getLogArgsForCall[i].appId, fake.getLogArgsForCall[i].buildId, fake.getLogArgsForCall[i].logType, fake.getLogArgsForCall[i].lines, fake.getLogArgsForCall[i].offset
}

func (fake *FakeAppRepository) GetLogReturns(result1 api.LogsModel, result2 error) {
	fake.GetLogStub = nil
	fake.getLogReturns = struct {
		result1 api.LogsModel
		result2 error
	}{result1, result2}
}

func (fake *FakeAppRepository) GetLogReturnsOnCall(i int, result1 api.LogsModel, result2 error) {
	fake.GetLogStub = nil
	if fake.getLogReturnsOnCall == nil {
		fake.getLogReturnsOnCall = make(map[int]struct {
			result1 api.LogsModel
			result2 error
		})
	}
	fake.getLogReturnsOnCall[i] = struct {
		result1 api.LogsModel
		result2 error
	}{result1, result2}
}

func (fake *FakeAppRepository) GetPermission(app api.App, userId string) (api.AppPermission, error) {
	fake.getPermissionMutex.Lock()
	ret, specificReturn := fake.getPermissionReturnsOnCall[len(fake.getPermissionArgsForCall)]
	fake.getPermissionArgsForCall = append(fake.getPermissionArgsForCall, struct {
		app    api.App
		userId string
	}{app, userId})
	fake.recordInvocation("GetPermission", []interface{}{app, userId})
	fake.getPermissionMutex.Unlock()
	if fake.GetPermissionStub != nil {
		return fake.GetPermissionStub(app, userId)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getPermissionReturns.result1, fake.getPermissionReturns.result2
}

func (fake *FakeAppRepository) GetPermissionCallCount() int {
	fake.getPermissionMutex.RLock()
	defer fake.getPermissionMutex.RUnlock()
	return len(fake.getPermissionArgsForCall)
}

func (fake *FakeAppRepository) GetPermissionArgsForCall(i int) (api.App, string) {
	fake.getPermissionMutex.RLock()
	defer fake.getPermissionMutex.RUnlock()
	return fake.getPermissionArgsForCall[i].app, fake.getPermissionArgsForCall[i].userId
}

func (fake *FakeAppRepository) GetPermissionReturns(result1 api.AppPermission, result2 error) {
	fake.GetPermissionStub = nil
	fake.getPermissionReturns = struct {
		result1 api.AppPermission
		result2 error
	}{result1, result2}
}

func (fake *FakeAppRepository) GetPermissionReturnsOnCall(i int, result1 api.AppPermission, result2 error) {
	fake.GetPermissionStub = nil
	if fake.getPermissionReturnsOnCall == nil {
		fake.getPermissionReturnsOnCall = make(map[int]struct {
			result1 api.AppPermission
			result2 error
		})
	}
	fake.getPermissionReturnsOnCall[i] = struct {
		result1 api.AppPermission
		result2 error
	}{result1, result2}
}

func (fake *FakeAppRepository) GetCollaborators(appId string) ([]api.UserModel, error) {
	fake.getCollaboratorsMutex.Lock()
	ret, specificReturn := fake.getCollaboratorsReturnsOnCall[len(fake.getCollaboratorsArgsForCall)]
	fake.getCollaboratorsArgsForCall = append(fake.getCollaboratorsArgsForCall, struct {
		appId string
	}{appId})
	fake.recordInvocation("GetCollaborators", []interface{}{appId})
	fake.getCollaboratorsMutex.Unlock()
	if fake.GetCollaboratorsStub != nil {
		return fake.GetCollaboratorsStub(appId)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getCollaboratorsReturns.result1, fake.getCollaboratorsReturns.result2
}

func (fake *FakeAppRepository) GetCollaboratorsCallCount() int {
	fake.getCollaboratorsMutex.RLock()
	defer fake.getCollaboratorsMutex.RUnlock()
	return len(fake.getCollaboratorsArgsForCall)
}

func (fake *FakeAppRepository) GetCollaboratorsArgsForCall(i int) string {
	fake.getCollaboratorsMutex.RLock()
	defer fake.getCollaboratorsMutex.RUnlock()
	return fake.getCollaboratorsArgsForCall[i].appId
}

func (fake *FakeAppRepository) GetCollaboratorsReturns(result1 []api.UserModel, result2 error) {
	fake.GetCollaboratorsStub = nil
	fake.getCollaboratorsReturns = struct {
		result1 []api.UserModel
		result2 error
	}{result1, result2}
}

func (fake *FakeAppRepository) GetCollaboratorsReturnsOnCall(i int, result1 []api.UserModel, result2 error) {
	fake.GetCollaboratorsStub = nil
	if fake.getCollaboratorsReturnsOnCall == nil {
		fake.getCollaboratorsReturnsOnCall = make(map[int]struct {
			result1 []api.UserModel
			result2 error
		})
	}
	fake.getCollaboratorsReturnsOnCall[i] = struct {
		result1 []api.UserModel
		result2 error
	}{result1, result2}
}

func (fake *FakeAppRepository) AddCollaborator(appId string, param api.CreateCollaboratorParams) error {
	fake.addCollaboratorMutex.Lock()
	ret, specificReturn := fake.addCollaboratorReturnsOnCall[len(fake.addCollaboratorArgsForCall)]
	fake.addCollaboratorArgsForCall = append(fake.addCollaboratorArgsForCall, struct {
		appId string
		param api.CreateCollaboratorParams
	}{appId, param})
	fake.recordInvocation("AddCollaborator", []interface{}{appId, param})
	fake.addCollaboratorMutex.Unlock()
	if fake.AddCollaboratorStub != nil {
		return fake.AddCollaboratorStub(appId, param)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.addCollaboratorReturns.result1
}

func (fake *FakeAppRepository) AddCollaboratorCallCount() int {
	fake.addCollaboratorMutex.RLock()
	defer fake.addCollaboratorMutex.RUnlock()
	return len(fake.addCollaboratorArgsForCall)
}

func (fake *FakeAppRepository) AddCollaboratorArgsForCall(i int) (string, api.CreateCollaboratorParams) {
	fake.addCollaboratorMutex.RLock()
	defer fake.addCollaboratorMutex.RUnlock()
	return fake.addCollaboratorArgsForCall[i].appId, fake.addCollaboratorArgsForCall[i].param
}

func (fake *FakeAppRepository) AddCollaboratorReturns(result1 error) {
	fake.AddCollaboratorStub = nil
	fake.addCollaboratorReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppRepository) AddCollaboratorReturnsOnCall(i int, result1 error) {
	fake.AddCollaboratorStub = nil
	if fake.addCollaboratorReturnsOnCall == nil {
		fake.addCollaboratorReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addCollaboratorReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppRepository) RemoveCollaborator(appId string, userId string) error {
	fake.removeCollaboratorMutex.Lock()
	ret, specificReturn := fake.removeCollaboratorReturnsOnCall[len(fake.removeCollaboratorArgsForCall)]
	fake.removeCollaboratorArgsForCall = append(fake.removeCollaboratorArgsForCall, struct {
		appId  string
		userId string
	}{appId, userId})
	fake.recordInvocation("RemoveCollaborator", []interface{}{appId, userId})
	fake.removeCollaboratorMutex.Unlock()
	if fake.RemoveCollaboratorStub != nil {
		return fake.RemoveCollaboratorStub(appId, userId)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.removeCollaboratorReturns.result1
}

func (fake *FakeAppRepository) RemoveCollaboratorCallCount() int {
	fake.removeCollaboratorMutex.RLock()
	defer fake.removeCollaboratorMutex.RUnlock()
	return len(fake.removeCollaboratorArgsForCall)
}

func (fake *FakeAppRepository) RemoveCollaboratorArgsForCall(i int) (string, string) {
	fake.removeCollaboratorMutex.RLock()
	defer fake.removeCollaboratorMutex.RUnlock()
	return fake.removeCollaboratorArgsForCall[i].appId, fake.removeCollaboratorArgsForCall[i].userId
}

func (fake *FakeAppRepository) RemoveCollaboratorReturns(result1 error) {
	fake.RemoveCollaboratorStub = nil
	fake.removeCollaboratorReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppRepository) RemoveCollaboratorReturnsOnCall(i int, result1 error) {
	fake.RemoveCollaboratorStub = nil
	if fake.removeCollaboratorReturnsOnCall == nil {
		fake.removeCollaboratorReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeCollaboratorReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppRepository) TransferToUser(appId string, email string) error {
	fake.transferToUserMutex.Lock()
	ret, specificReturn := fake.transferToUserReturnsOnCall[len(fake.transferToUserArgsForCall)]
	fake.transferToUserArgsForCall = append(fake.transferToUserArgsForCall, struct {
		appId string
		email string
	}{appId, email})
	fake.recordInvocation("TransferToUser", []interface{}{appId, email})
	fake.transferToUserMutex.Unlock()
	if fake.TransferToUserStub != nil {
		return fake.TransferToUserStub(appId, email)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.transferToUserReturns.result1
}

func (fake *FakeAppRepository) TransferToUserCallCount() int {
	fake.transferToUserMutex.RLock()
	defer fake.transferToUserMutex.RUnlock()
	return len(fake.transferToUserArgsForCall)
}

func (fake *FakeAppRepository) TransferToUserArgsForCall(i int) (string, string) {
	fake.transferToUserMutex.RLock()
	defer fake.transferToUserMutex.RUnlock()
	return fake.transferToUserArgsForCall[i].appId, fake.transferToUserArgsForCall[i].email
}

func (fake *FakeAppRepository) TransferToUserReturns(result1 error) {
	fake.TransferToUserStub = nil
	fake.transferToUserReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppRepository) TransferToUserReturnsOnCall(i int, result1 error) {
	fake.TransferToUserStub = nil
	if fake.transferToUserReturnsOnCall == nil {
		fake.transferToUserReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.transferToUserReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppRepository) TransferToOrg(appId string, orgName string) error {
	fake.transferToOrgMutex.Lock()
	ret, specificReturn := fake.transferToOrgReturnsOnCall[len(fake.transferToOrgArgsForCall)]
	fake.transferToOrgArgsForCall = append(fake.transferToOrgArgsForCall, struct {
		appId   string
		orgName string
	}{appId, orgName})
	fake.recordInvocation("TransferToOrg", []interface{}{appId, orgName})
	fake.transferToOrgMutex.Unlock()
	if fake.TransferToOrgStub != nil {
		return fake.TransferToOrgStub(appId, orgName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.transferToOrgReturns.result1
}

func (fake *FakeAppRepository) TransferToOrgCallCount() int {
	fake.transferToOrgMutex.RLock()
	defer fake.transferToOrgMutex.RUnlock()
	return len(fake.transferToOrgArgsForCall)
}

func (fake *FakeAppRepository) TransferToOrgArgsForCall(i int) (string, string) {
	fake.transferToOrgMutex.RLock()
	defer fake.transferToOrgMutex.RUnlock()
	return fake.transferToOrgArgsForCall[i].appId, fake.transferToOrgArgsForCall[i].orgName
}

func (fake *FakeAppRepository) TransferToOrgReturns(result1 error) {
	fake.TransferToOrgStub = nil
	fake.transferToOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppRepository) TransferToOrgReturnsOnCall(i int, result1 error) {
	fake.TransferToOrgStub = nil
	if fake.transferToOrgReturnsOnCall == nil {
		fake.transferToOrgReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.transferToOrgReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.getAppMutex.RLock()
	defer fake.getAppMutex.RUnlock()
	fake.getAppsMutex.RLock()
	defer fake.getAppsMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.bindWithRouteMutex.RLock()
	defer fake.bindWithRouteMutex.RUnlock()
	fake.unbindRouteMutex.RLock()
	defer fake.unbindRouteMutex.RUnlock()
	fake.getRoutesMutex.RLock()
	defer fake.getRoutesMutex.RUnlock()
	fake.getRoutesByURIMutex.RLock()
	defer fake.getRoutesByURIMutex.RUnlock()
	fake.setEnvMutex.RLock()
	defer fake.setEnvMutex.RUnlock()
	fake.unsetEnvMutex.RLock()
	defer fake.unsetEnvMutex.RUnlock()
	fake.switchStackMutex.RLock()
	defer fake.switchStackMutex.RUnlock()
	fake.getLogMutex.RLock()
	defer fake.getLogMutex.RUnlock()
	fake.getPermissionMutex.RLock()
	defer fake.getPermissionMutex.RUnlock()
	fake.getCollaboratorsMutex.RLock()
	defer fake.getCollaboratorsMutex.RUnlock()
	fake.addCollaboratorMutex.RLock()
	defer fake.addCollaboratorMutex.RUnlock()
	fake.removeCollaboratorMutex.RLock()
	defer fake.removeCollaboratorMutex.RUnlock()
	fake.transferToUserMutex.RLock()
	defer fake.transferToUserMutex.RUnlock()
	fake.transferToOrgMutex.RLock()
	defer fake.transferToOrgMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAppRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.AppRepository = new(FakeAppRepository)
