// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/cnupp/appssdk/api"
)

type FakeRouteRepository struct {
	CreateStub        func(params api.RouteParams) (apiErr error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		params api.RouteParams
	}
	createReturns struct {
		result1 error
	}
	createReturnsOnCall map[int]struct {
		result1 error
	}
	GetRoutesStub        func() (routes api.Routes, apiErr error)
	getRoutesMutex       sync.RWMutex
	getRoutesArgsForCall []struct{}
	getRoutesReturns     struct {
		result1 api.Routes
		result2 error
	}
	getRoutesReturnsOnCall map[int]struct {
		result1 api.Routes
		result2 error
	}
	GetAppsForRouteStub        func(routeId string) (apps api.Apps, apiErr error)
	getAppsForRouteMutex       sync.RWMutex
	getAppsForRouteArgsForCall []struct {
		routeId string
	}
	getAppsForRouteReturns struct {
		result1 api.Apps
		result2 error
	}
	getAppsForRouteReturnsOnCall map[int]struct {
		result1 api.Apps
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRouteRepository) Create(params api.RouteParams) (apiErr error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		params api.RouteParams
	}{params})
	fake.recordInvocation("Create", []interface{}{params})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(params)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createReturns.result1
}

func (fake *FakeRouteRepository) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeRouteRepository) CreateArgsForCall(i int) api.RouteParams {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].params
}

func (fake *FakeRouteRepository) CreateReturns(result1 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteRepository) CreateReturnsOnCall(i int, result1 error) {
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteRepository) GetRoutes() (routes api.Routes, apiErr error) {
	fake.getRoutesMutex.Lock()
	ret, specificReturn := fake.getRoutesReturnsOnCall[len(fake.getRoutesArgsForCall)]
	fake.getRoutesArgsForCall = append(fake.getRoutesArgsForCall, struct{}{})
	fake.recordInvocation("GetRoutes", []interface{}{})
	fake.getRoutesMutex.Unlock()
	if fake.GetRoutesStub != nil {
		return fake.GetRoutesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getRoutesReturns.result1, fake.getRoutesReturns.result2
}

func (fake *FakeRouteRepository) GetRoutesCallCount() int {
	fake.getRoutesMutex.RLock()
	defer fake.getRoutesMutex.RUnlock()
	return len(fake.getRoutesArgsForCall)
}

func (fake *FakeRouteRepository) GetRoutesReturns(result1 api.Routes, result2 error) {
	fake.GetRoutesStub = nil
	fake.getRoutesReturns = struct {
		result1 api.Routes
		result2 error
	}{result1, result2}
}

func (fake *FakeRouteRepository) GetRoutesReturnsOnCall(i int, result1 api.Routes, result2 error) {
	fake.GetRoutesStub = nil
	if fake.getRoutesReturnsOnCall == nil {
		fake.getRoutesReturnsOnCall = make(map[int]struct {
			result1 api.Routes
			result2 error
		})
	}
	fake.getRoutesReturnsOnCall[i] = struct {
		result1 api.Routes
		result2 error
	}{result1, result2}
}

func (fake *FakeRouteRepository) GetAppsForRoute(routeId string) (apps api.Apps, apiErr error) {
	fake.getAppsForRouteMutex.Lock()
	ret, specificReturn := fake.getAppsForRouteReturnsOnCall[len(fake.getAppsForRouteArgsForCall)]
	fake.getAppsForRouteArgsForCall = append(fake.getAppsForRouteArgsForCall, struct {
		routeId string
	}{routeId})
	fake.recordInvocation("GetAppsForRoute", []interface{}{routeId})
	fake.getAppsForRouteMutex.Unlock()
	if fake.GetAppsForRouteStub != nil {
		return fake.GetAppsForRouteStub(routeId)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getAppsForRouteReturns.result1, fake.getAppsForRouteReturns.result2
}

func (fake *FakeRouteRepository) GetAppsForRouteCallCount() int {
	fake.getAppsForRouteMutex.RLock()
	defer fake.getAppsForRouteMutex.RUnlock()
	return len(fake.getAppsForRouteArgsForCall)
}

func (fake *FakeRouteRepository) GetAppsForRouteArgsForCall(i int) string {
	fake.getAppsForRouteMutex.RLock()
	defer fake.getAppsForRouteMutex.RUnlock()
	return fake.getAppsForRouteArgsForCall[i].routeId
}

func (fake *FakeRouteRepository) GetAppsForRouteReturns(result1 api.Apps, result2 error) {
	fake.GetAppsForRouteStub = nil
	fake.getAppsForRouteReturns = struct {
		result1 api.Apps
		result2 error
	}{result1, result2}
}

func (fake *FakeRouteRepository) GetAppsForRouteReturnsOnCall(i int, result1 api.Apps, result2 error) {
	fake.GetAppsForRouteStub = nil
	if fake.getAppsForRouteReturnsOnCall == nil {
		fake.getAppsForRouteReturnsOnCall = make(map[int]struct {
			result1 api.Apps
			result2 error
		})
	}
	fake.getAppsForRouteReturnsOnCall[i] = struct {
		result1 api.Apps
		result2 error
	}{result1, result2}
}

func (fake *FakeRouteRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.getRoutesMutex.RLock()
	defer fake.getRoutesMutex.RUnlock()
	fake.getAppsForRouteMutex.RLock()
	defer fake.getAppsForRouteMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRouteRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.RouteRepository = new(FakeRouteRepository)
